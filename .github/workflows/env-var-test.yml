name: env-var-test
on: pull_request
jobs:
  env-var-test:
    strategy:
      # By default, if any job in a matrix fails, all other jobs are immediately cancelled. This makes the jobs run to completion instead.
      fail-fast: false
      matrix:
        os: [ { vm: ubuntu-latest, exe: .sh }, { vm: windows-2019, exe: .cmd } ]
        node: [ 'lts/*' ]
    runs-on: ${{ matrix.os.vm }}
    timeout-minutes: 60
    env:
      CLI_INSTALL_RETRY_COUNT: 0
      PLUGIN_INSTALL_RETRY_COUNT: 0
    steps:
      # === Setup. We need to get the code, set up nodejs, and create the results directory. ===
      - uses: actions/checkout@v2
        with:
          ref: 'release'
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: mkdir smoke-test-results
      # === Make three attempts to install sfdx through npm ===
      - name: Immediate Success
        id: no_retries
        run: |
          (echo "::set-output name=retry_count::0" && npm view -g @salesforce/sfdx-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::1" && npm view -g @salesforce/sfdx-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::2" && npm view -g @salesforce/sfdx-scanner)


      - name: Success on retry
        id: one_retry
        run: |
          (echo "::set-output name=retry_count::0" && npm view -g @salesforce/cli-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::1" && npm view -g @salesforce/sfdx-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::2" && npm view -g @salesforce/sfdx-scanner)

      - name: Success on second retry
        id: two_retries
        run: |
          (echo "::set-output name=retry_count::0" && npm view -g @salesforce/cli-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::1" && npm view -g @salesforce/cli-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::2" && npm view -g @salesforce/sfdx-scanner)

      - name: Total failure
        id: total_failure
        run: |
          (echo "::set-output name=retry_count::0" && npm view -g @salesforce/cli-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::1" && npm view -g @salesforce/cli-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::2" && npm view -g @salesforce/sfdx-scanner)

      - name: This job is skipped
        id: skipped_job
        run: |
          (echo "::set-output name=retry_count::0" && npm view -g @salesforce/sfdx-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::1" && npm view -g @salesforce/cli-scanner) ||
          (sleep 2 && echo "::set-output name=retry_count::2" && npm view -g @salesforce/cli-scanner)

      - name: pass_finisher
        if: ${{ failure() || cancelled() || (join(steps.*.outputs.retry_count) != '0,0,0,0,0') }}
        shell: bash
        env:
          IS_CRITICAL: ${{ contains(join(steps.*.outcome), 'failure') || contains(join(steps.*.outcome), 'skipped') }}
          JOB1_STATE: ${{ steps.no_retries.outcome }} after ${{ steps.no_retries.outputs.retry_count || 'n/a' }} attempts
          JOB2_STATE: ${{ steps.one_retry.outcome }} after ${{ steps.one_retry.outputs.retry_count || 'n/a' }} attempts
          JOB3_STATE: ${{ steps.two_retries.outcome }} after ${{ steps.two_retries.outputs.retry_count || 'n/a' }} attempts
          JOB4_STATE: ${{ steps.total_failure.outcome }} after ${{ steps.total_failure.outputs.retry_count || 'n/a' }} attempts
          JOB5_STATE: ${{ steps.skipped_job.outcome }} after ${{ steps.skipped_job.outputs.retry_count || 'n/a' }} attempts
        run: |
          echo "combined retry counts ${{ join(steps.*.outputs.retry_count) }}"
          echo "combined outcomes ${{ join(steps.*.outcome) }}"
          echo "${{ env.JOB1_STATE }}"
          echo "${{ env.JOB2_STATE }}"
          echo "${{ env.JOB3_STATE }}"
          echo "${{ env.JOB4_STATE }}"
          echo "${{ env.JOB5_STATE }}"
          echo "Is failure critical? ${{ env.IS_CRITICAL }}"
          ALERT_SEV="INFO" && [[ ${{ env.IS_CRITICAL }} == true ]] && ALERT_SEV="CRITICAL"
          echo $ALERT_SEV

#      # === Make three attempts to install sfdx through npm ===
#      - name: Install SFDX
#        id: sfdx_install
#        # If the first attempt fails, wait a minute and try again. After a second failure, wait 5 minutes then try again. Then give up.
#        run: npm install -g sfdx-cli || (sleep 60 && npm install -g sfdx-cli) || (sleep 300 && npm install -g sfdx-cli)
#
#      # === Attempt to install the scanner plugin ===
#      - name: Install Scanner Plugin
#        id: scanner_install
#        run: sfdx plugins:install @salesforce/sfdx-scanner
#
#      # === Log the installed plugins for easier debugging ===
#      - name: Log plugins
#        run: sfdx plugins
#
#      # === Attempt to execute the smoke tests ===
#      - name: Run smoke tests
#        id: smoke_tests
#        run: smoke-tests/smoke-test${{ matrix.os.exe }} sfdx
#
#      # === Upload the smoke-test-results folder as an artifact ===
#      - name: Upload smoke-test-results folder as artifact
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v2
#        with:
#          name: smoke-test-results-${{ runner.os }}
#          path: smoke-test-results
#
#      # === Report any failures ===
#      - name: Report failures
#        if: ${{ failure() || cancelled() }}
#        shell: bash
#        env:
#          # A link to this run
#          RUN_LINK: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
#        run: |
#          curl --request POST \
#          --data '{"payload": {
#            "summary": "Production heartbeat script failed on ${{ runner.os }}",
#            "source": "Github Actions",
#            "severity": "critical",
#            "custom_details": "SFDX install: ${{ steps.sfdx_install.outcome }}. Scanner install: ${{ steps.scanner_install.outcome }}. Smoke tests: ${{ steps.smoke_tests.outcome }}"
#          },
#          "links": [{
#            "href": "${{ env.RUN_LINK }}",
#            "text": "Link to action execution"
#          }],
#          "event_action": "trigger",
#          "dedup_key": "GH-HB-${{ matrix.os.vm }}-${{ matrix.node }}",
#          "routing_key": "${{ secrets.PAGERDUTY_HEARTBEAT_KEY }}"
#          }' \
#          https://events.pagerduty.com/v2/enqueue
#
#
