name: run-tests
on:
  workflow_call:
    inputs:
      node-matrix:
        description: "An array of node versions against which the tests should be run"
        required: false
        type: string
        default: "['lts/*']"

jobs:
  # Step 1: We have a number of dependencies that we can build now and cache
  #         for future use, to save time later.
  build-dependencies:
    runs-on: ubuntu-latest
    steps:
      # First thing's first; we need to get the code.
      - uses: actions/checkout@v2
      # Next, we need to make sure we're using the right versions of Node and Java.
      - uses: actions/setup-node@v2
        with:
          node-version: 'lts/*' # Always use Node LTS for building dependencies.
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8' # Always use Java v1.8 for building dependencies.
      # Install/build dependencies.
      - run: yarn
      - run: yarn build
      # Create a tarball.
      - run: npm pack
      # Upload the `dist` directory as an artifact so the unit test jobs have it.
      - uses: actions/upload-artifact@v3
        with:
          name: unit-test-dist
          path: ./dist
      # Upload the tarball as an artifact so the smoke test jobs have it.
      - uses: actions/upload-artifact@v3
        with:
          name: smoke-test-tarball
          path: ./salesforce-sfdx-scanner-*.tgz
  # Step 2: Run our tests.
  # Step 2A: Linux unit tests
  linux-unit-tests:
    runs-on: ubuntu-latest
    needs: build-dependencies
    strategy:
      matrix:
        node: ${{ fromJson(inputs.node-matrix) }}
    steps:
      # Check out the code.
      - uses: actions/checkout@v2
      # Make sure we're using the right versions of Node and Java.
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }} # Node version is a matrix.
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11' # For now, Java version is hardcoded. It could be changed to a matrix in the future.
      # Install Node dependencies.
      # NOTE: We're choosing not to cache Node depencies, because it seems to be more
      #       trouble than it's worth. If we see serious performance problems, we can
      #       reconsider that assessment.
      - run: yarn
      # Download the dist artifact, to save ourselves the trouble of rebuilding our
      # Java dependencies from scratch.
      - uses: actions/download-artifact@v3
        with:
          name: unit-test-dist
          path: ./dist
      # Run the unit tests
      - run: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
      # Run the linter
      - run: yarn lint --format junit --output-file test-results/eslint/eslint.xml
      # Upload the test results and coverage information as artifacts.
      - name: Upload node test artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-node-results
          path: |
            ./test-results
            ./test-coverage
      - name: Upload pmd-cataloger test artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-pmd-cataloger-results
          path: |
            pmd-cataloger/build/reports
            pmd-cataloger/build/test-results

#  # Step 1: Set up the environment and build the things we need.
#  setup-test-env:
#    runs-on: ubuntu-latest
#    steps:
#      # First thing's first; we need to get the code.
#      - uses: actions/checkout@v2
#      # Next, we need to make sure we're using v1.8 and Node LTS
#      - uses: actions/setup-node@v2
#        with:
#          node-version: 'lts/*'
#      - uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '8' # v1.8 required for building SFGE
#      # Next we install our dependencies and build, so we can run unit tests
#      - run: yarn
#      - run: yarn build
#      - run: find . -name nyc
#      # We also need to create a tarball for the smoke tests
#      - run: npm pack
#      #- run: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml # TODO
#      # Finally, we upload the entire working directory as an artifact, so it can
#      # be used in later jobs.
#      - run: zip working-dir.zip ./* -r -y
#      - uses: actions/upload-artifact@v3
#        with:
#          name: working-directory
#          path: ./working-dir.zip
#
#  # Step 2: We run our tests.
#  # Step 2A: Linux unit tests
#  linux-unit-tests:
#    runs-on: ubuntu-latest
#    needs: setup-test-env
#    strategy:
#      matrix:
#        node: ${{ fromJson(inputs.node-matrix) }}
#    steps:
#      # Download and unzip the artifact, so we can get the working directory without
#      # needing to repeat all the set-up we did.
#      - uses: actions/download-artifact@v3
#        with:
#          name: working-directory
#      - run: unzip working-dir.zip
#      # Set up the desired version of node.
#      - uses: actions/setup-node@v2
#        with:
#          node-version: ${{ matrix.node }}
#      # Set up Java v11. (NOTE: We could matrix-ify this in the future)
#      - uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '11'
#      - run: yarn list
#      - run: find . -name nyc
#      # Run the unit tests
#      - run: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
#      # Run the linter
#      #- run: yarn lint --format junit --output-file test-results/eslint/eslint.xml
#  # Step 2B: Windows unit tests
#  windows-unit-tests:
#    runs-on: windows-2019
#    needs: setup-test-env
#    steps:
#      - run: echo Running windows tests
#  # Step 2C: Linux smoke tests
#  linux-smoke-tests:
#    runs-on: ubuntu-latest
#    needs: setup-test-env
#    steps:
#      - run: echo Running linux smoke
#  # Step 2D: Windows smoke tests
#  windows-smoke-tests:
#    runs-on: windows-2019
#    needs: setup-test-env
#    steps:
#      - run: echo Running windows smoke
#  # Step 2E: Self-evaluation on Linux
#  self-evaluation:
#    runs-on: ubuntu-latest
#    needs: setup-test-env
#    steps:
#      - run: echo Running Self-eval
#
