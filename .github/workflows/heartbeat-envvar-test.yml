name: heartbeat-envvar-test
on:
  pull_request: # As per documentation, the colon is necessary even though no config is required.
jobs:
  heartbeat-envvar-test:
    strategy:
      # By default, if any job in a matrix fails, all other jobs are immediately cancelled. This makes the jobs run to completion instead.
      fail-fast: false
      matrix:
        os: [{vm: ubuntu-latest, exe: .sh}, {vm: windows-2019, exe: .cmd}]
        node: ['lts/*']
    runs-on: ${{ matrix.os.vm }}
    timeout-minutes: 60
    steps:
      # === Setup. We need to get the code, set up nodejs, and create the results directory. ===
      - uses: actions/checkout@v2
        with:
          ref: 'release'
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: mkdir smoke-test-results

      # === Set our environment variables, either using default values or the repo's secrets ===
      - name: Set environment variables
        id: env_var_setup
        # We'll want to use bash for this, to avoid any cross-platform shenanigans
        shell: bash
        run: |
          # In the following script, the use of the `echo "name=value" >> $GITHUB_ENV` structure is used to set/update
          # environment variables. Such updates are visible to all subsequent steps.
          #
          # If the CLI_VERSION repo secret is set, we want to install that version of sfdx-cli, so we set an environment
          # variable. Otherwise, we leave the environment variable unset, so it implicitly defaults to `latest`.
          # Note: This can be used to intentionally fail the GHA by providing an invalid version number.
          if [[ -n "${{ secrets.CLI_VERSION }}" ]]; then
            echo "CLI_VERSION=@${{ secrets.CLI_VERSION}}" >> $GITHUB_ENV
          fi
          # If the SCANNER_VERSION repo secret is set, we want to install that version of sfdx-scanner, so we set an
          # environment variable. Otherwise, we leave the environment variable unset, so it implicitly defaults to `latest`.
          # Note: This can be used to intentionally fail the GHA by providing an invalid version number.
          if [[ -n "${{ secrets.SCANNER_VERSION }}" ]]; then
            echo "SCANNER_VERSION=@${{ secrets.SCANNER_VERSION }}" >> $GITHUB_ENV
          fi
          # If the FAIL_SMOKE_TESTS repo secret is set to ANY value, we should respond by deleting the tests/test-jars
          # directory, which contains some JARs used by the smoke tests. This should cause the `scanner:rule:add` command
          # to fail, which should in turn fail the smoke tests altogether.
          # Note: This serves no purpose aside from providing a way to simulate a smoke test failure.
          if [[ -n "${{ secrets.FAIL_SMOKE_TESTS }}" ]]; then
            rm -rf ./test/test-jars
          fi


      # === Make three attempts to install sfdx through npm ===
      - name: Install SFDX
        id: sfdx_install
        # If the first attempt fails, wait a minute and try again. After a second failure, wait 5 minutes then try again. Then give up.
        # Set an output parameter, `retry_count`, indicating the number of retry attempts that were made.
        run: |
          (echo "::set-output name=retry_count::0" && npm install -g sfdx-cli${{ env.CLI_VERSION }}) ||
          (echo "::set-output name=retry_count::1" && npm install -g sfdx-cli${{ env.CLI_VERSION }}) ||
          (echo "::set-output name=retry_count::2" && npm install -g sfdx-cli${{ env.CLI_VERSION }})

      # === Make three attempts to install the scanner plugin through sfdx ===
      - name: Install Scanner Plugin
        id: scanner_install
        # If the first attempt fails, wait a minute and try again. After a second failure, wait 5 minutes then try again. Then give up.
        # Set an output parameter, `retry_count`, indicating the number of retry attempts that were made.
        run: |
          (echo "::set-output name=retry_count::0" && sfdx plugins:install @salesforce/sfdx-scanner${{ env.SCANNER_VERSION }}) ||
          (echo "::set-output name=retry_count::1" && sfdx plugins:install @salesforce/sfdx-scanner${{ env.SCANNER_VERSION }}) ||
          (echo "::set-output name=retry_count::2" && sfdx plugins:install @salesforce/sfdx-scanner${{ env.SCANNER_VERSION }})

      # === Log the installed plugins for easier debugging ===
      - name: Log plugins
        run: sfdx plugins

      # === Attempt to execute the smoke tests ===
      - name: Run smoke tests
        id: smoke_tests
        run: |
          # Run the pre-smoke-command, which will either be an echo indicating that it's fine to proceed, or an early exit.
          ${{ env.PRE_SMOKE_COMMAND }}
          smoke-tests/smoke-test${{ matrix.os.exe }} sfdx

      # === Upload the smoke-test-results folder as an artifact ===
      - name: Upload smoke-test-results folder as artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: smoke-test-results-${{ runner.os }}
          path: smoke-test-results
