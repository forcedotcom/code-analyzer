# Javascript Node CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/openjdk:11.0.2-jdk-node

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.
  gradle: circleci/gradle@2.2.0
  node: circleci/node@4.5.1


commands:
  # Purpose: Checkout the code from github
  auth_and_checkout:
    steps:
      - add_ssh_keys:
          fingerprints:
            # CircleCI deploy key, allows CircleCI to checkout code from Github.
            - "63:74:04:09:64:97:7e:c6:9b:45:c0:5e:d3:7e:40:ed"
      - checkout

  # Purpose: Update node. Currently only upgrades to LTS, but could be trivially parameterized to support other versions.
  update_node:
    parameters:
      os:
        default: linux
        description: The OS being tested against
        enum:
          - linux
          - windows
        type: enum
      lts:
        default: true
        description: Should LTS be installed. If false, Current will be installed instead.
        type: boolean
    steps:
      # For Linux, we can just use the node orb.
      - when:
          condition:
            equal:
              - linux
              - << parameters.os >>
          steps:
            - node/install:
                install-npm: false
                lts: << parameters.lts >>
      # For Windows, we need to use a custom bash script.
      - when:
          condition:
            equal:
              - windows
              - << parameters.os >>
          steps:
            - run:
                name: "Install node"
                # This script must explicitly be run in bash.
                shell: bash.exe
                command: .circleci/windows-node-upgrade.sh <<# parameters.lts >> lts <</ parameters.lts >> <<^ parameters.lts >> current <</ parameters.lts >>

            # After upgrading the node version in a Windows executor, we have to manually reinstall Yarn if we want to use it.
            - run:
                name: "Install Yarn"
                shell: bash.exe
                command: npm install -g yarn
      # Regardless of OS, we want to log the version of Node we're using post-upgrade.
      - run: node -v

  # Purpose: Performs all of the follow-up actions after unit tests are executed. E.g., storing results and artifacts.
  process_unit_test_results:
    steps:
      # Store test results and artifacts
      - gradle/collect_test_results:
          reports_path: pmd-cataloger/build/reports/
          test_results_path: pmd-cataloger/build/test-results/
      - store_test_results:
          path: test-results
      - store_artifacts: # upload test coverage as artifact.
          path: test-coverage

  # Purpose: Install SFDX, and the locally-built tarball of the plugin.
  install_local_tarball:
    parameters:
      shell:
        description: The shell executable to use
        type: string
      dir-uri:
        description: The directory for the local install
        type: string
    steps:
      - run:
          name: "Install SFDX and tarball"
          shell: << parameters.shell >>
          command: |
            npm install -g sfdx-cli
            # We need to determine the name of the tarball
            SFDC_TARBALL=$(ls | grep salesforce-sfdx-scanner-[0-9]*\\.[0-9]*\\.[0-9]*\\.tgz)
            # We also ought to determine where we are, using the parameter
            DIR=<< parameters.dir-uri >>
            # Pipe in a 'y' to simulate agreeing to isntall an unsigned plugin. Use a URI of the file's full path.
            echo y | sfdx plugins:install "file://${DIR}/${SFDC_TARBALL}"

  # Purpose: Install SFDX, and the release candidate version of the plugin.
  install_release_candidate:
    steps:
      - run:
          name: "Install SFDX cli"
          command: npm install -g sfdx-cli

      - run:
          name: "Install release candidate"
          command: sfdx plugins:install @salesforce/sfdx-scanner@latest-rc

jobs:
  param-testing:
    <<: *defaults
    parameters:
      node-version:
        description: What version of node do we want
        type: enum
        enum:
          - current
          - lts
        default: lts
    steps:
      - auth_and_checkout
      - when:
          condition:
            equal:
              - lts
              - << parameters.node-version >>
          steps:
            - update_node:
                os: linux
                lts: true
      - when:
          condition:
            equal:
              - current
              - << parameters.node-version >>
          steps:
            - update_node:
                os: linux
                lts: false
  windows-param-testing:
    executor:
      name: win/default
      size: "medium"
    parameters:
      node-version:
        description: What version of node do we want
        type: enum
        enum:
          - current
          - lts
        default: lts
    steps:
      - auth_and_checkout
      - when:
          condition:
            equal:
              - lts
              - << parameters.node-version >>
          steps:
            - update_node:
                os: windows
                lts: true
      - when:
          condition:
            equal:
              - current
              - << parameters.node-version >>
          steps:
            - update_node:
                os: windows
                lts: false

workflows:
  version: 2.1
  # Purpose: Run unit tests and smoke tests against a branch.
  # Triggered by: Pull requests from any branch. Since branches are inclusive by default and tags are exclusive by default,
  # no explicit filters are required.
  test:
    jobs:
      - param-testing:
          node-version: current
      - windows-param-testing:
          node-version: current
