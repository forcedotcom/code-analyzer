# Javascript Node CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/openjdk:11.0.2-jdk-node

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.
  release-management: salesforce/npm-release-management@3.5.1
  gradle: circleci/gradle@2.2.0
  node: circleci/node@4.5.1


commands:
  auth_and_checkout:
    steps:
      - add_ssh_keys:
          fingerprints:
            # CircleCI deploy key, allows CircleCI to checkout code from Github.
            - "63:74:04:09:64:97:7e:c6:9b:45:c0:5e:d3:7e:40:ed"
      - checkout

jobs:
  linux-unit-tests:
    <<: *defaults
    steps:
      - auth_and_checkout

      # We want our unit tests to run with the lts version of node.
      - node/install:
          install-npm: false
          lts: true

      # Log the version of node we're using after the upgrade.
      - run: node -v

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn --ignore-scripts
      - run: yarn build

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - persist_to_workspace:
          root: ~/repo
          paths: .

      # UNIT TESTS
      - run:
          name: test
          command: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
          when: always

      - run:
          name: eslint
          command: yarn lint --format junit --output-file test-results/eslint/eslint.xml
          when: always

      - gradle/collect_test_results:
          reports_path: pmd-cataloger/build/reports/
          test_results_path: pmd-cataloger/build/test-results/

      - store_test_results:
          path: test-results

      - store_artifacts: # upload test coverage as artifact.
          path: test-coverage
  windows-unit-tests:
    executor:
      name: win/default # executor type
      size: "medium"
      # Necessary to explicitly use bash, otherwise gradlew's status code won't be received and the job will hang.
      shell: bash.exe
    working_directory: C:\repo
    steps:
      - attach_workspace:
          at: C:\repo

      - run:
          name: "Upgrade node to LTS"
          # The script has to be run in bash.
          shell: bash.exe
          command: .circleci/windows-node-upgrade.sh lts

      # After upgrading the node version in a Windows executor, we have to manually reinstall Yarn if we want to use it.
      - run:
          name: "Reinstall yarn"
          shell: bash.exe
          command: npm install -g yarn

      # Log the version of node we're using after the upgrade.
      - run: node -v

      - run: mkdir test-results

      # UNIT TESTS
      - run:
          name: test
          command: yarn test --reporter mocha-junit-reporter --reporter-option mochaFile=test-results/mocha/test-results.xml
          when: always

      - run:
          name: eslint
          command: yarn lint --format junit --output-file test-results/eslint/eslint.xml
          when: always

      - gradle/collect_test_results:
          reports_path: pmd-cataloger/build/reports/
          test_results_path: pmd-cataloger/build/test-results/

      - store_test_results:
          path: test-results

      - store_artifacts: # upload test coverage as artifact.
          path: test-coverage

  self-evaluation:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run: mkdir test-results

      - run:
          name: "list rules"
          command: bin/run scanner:rule:list

      - run:
          name: "self-evaluate"
          command: |
            bin/run scanner:run --target ./src --format junit --outfile ./test-results/src.xml --violations-cause-error
          # TODO: We'll also need to make it scan the pmd-cataloger folder once we have an easy way of making it target Java.
          # bin/run scanner:run --target ./pmd-cataloger --format junit --outfile ./test-results/pmd-cataloger.xml --violations-cause-error

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  linux-tarball-smoke-tests:
    <<: *defaults
    parameters:
      # If true, the tests will use the LTS version of node. If false, the latest version of node will be used instead.
      lts:
        type: boolean
        default: true
    steps:
      - attach_workspace:
          at: ~/repo

      # Upgrade to whatever version of Node we need.
      - node/install:
          install-npm: false
          lts: << parameters.lts >>

      # Log the version of node we're using post-upgrade.
      - run: node -v

      - run:
          name: "Install sfdx-cli"
          command: npm install -g sfdx-cli

      # Build and install our tarball.
      - run:
          name: "Build and install tarball"
          command: |
            yarn pack --filename tarball.tgz
            # Pipe in a 'y' to simulate agreeing to install an unsigned plugin. Use a URI consisting of the file's full path.
            echo y | sfdx plugins:install file://`pwd`/tarball.tgz

      # Persist the workspace, so the tarball is visible to subsequent jobs in this flow.
      - persist_to_workspace:
          root: ~/repo
          paths: .

      # Create a directory for the test output.
      - run: mkdir test-results

      # Run the smoke tests. If none of them explode, we can reasonably assume that the plugin is safe.
      - run:
          name: "Smoke Tests"
          command: smoke-tests/smoke-test.sh sfdx

      # Upload the results as an artifact instead of as test results, so they don't tank the build.
      - store_artifacts:
          path: test-results

  windows-tarball-smoke-tests:
    executor:
      name: win/default # Executor type
      size: "medium"
    parameters:
      # If true, the tests will use the LTS version of node. If false, the latest version of node will be used instead.
      lts:
        type: boolean
        default: true
    working_directory: C:\repo

    steps:
      # Commands are run in a Windows virtual machine environment.
      - attach_workspace:
          at: C:\repo

      # Upgrade node to whatever version we need.
      - run:
          name: "Upgrade node"
          shell: bash.exe
          command: |
            DESIRED_VERSION="current" && [[ << parameters.lts >> == true ]] && DESIRED_VERSION="lts"
            .circleci/windows-node-upgrade.sh ${DESIRED_VERSION}

      # After upgrading the node version in a Windows executor, we have to manually reinstall Yarn if we want to use it.
      - run:
          name: "Reinstall yarn"
          shell: bash.exe
          command: npm install -g yarn

      # Log the version of node we're using post-upgrade
      - run: node -v

      - run:
          name: "Install sfdx cli"
          shell: cmd.exe
          command: npm install -g sfdx-cli

      - run: md test-results

      # Install our tarball.
      - run:
          name: "Build and install tarball"
          shell: bash.exe
          # Pipe in 'y' to simulate agreeing to install an unsigned plugin. Also, note that the file URI doesn't have the C: in it.
          command: echo y | sfdx plugins:install file:///repo/tarball.tgz

      # Run the smoke tests. If none of them explode, we can reasonably assume that the plugin is stable.
      - run:
          name: "Smoke Tests"
          command: smoke-tests\smoke-test.cmd sfdx

      # Upload the results as an artifact instead of as test results, so they don't tank the build.
      - store_artifacts:
          path: test-results

  packaged-sanity:
    executor:
      name: win/default # executor type
      size: "medium"

    steps:
      - auth_and_checkout

      - run:
          name: "Upgrade node to LTS"
          shell: bash.exe
          command: .circleci/windows-node-upgrade.sh lts

      # Log the version of node we're using after the upgrade.
      - run: node -v

      - run:
          name: "Install sfdx cli"
          shell: cmd.exe
          command: npm install -g sfdx-cli

      - run:
          name: "Install plugin"
          shell: cmd.exe
          command: echo y | sfdx plugins:install --force @salesforce/sfdx-scanner

      - run:
          # Run through our sanity test script against the published version of the plugin, which we installed in the
          # previous step. If all of these pass, we can assume the plugin is stable.
          name: "Packaged sanity test"
          command: smoke-tests\smoke-test.cmd sfdx

      # Upload an artifact for the results, so they're visible without failing the tests
      - store_artifacts:
          path: test-results

  auto-merge-release:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e2:99:c9:bf:d6:40:04:d6:56:48:05:eb:1a:41:f6:a4"
      - auth_and_checkout
      - run:
          name: "Merge release"
          command: |
            git config user.email "isv.swat@salesforce.com"
            git config user.name "$CIRCLE_USERNAME"
            git checkout dev
            git pull origin dev
            git merge release --commit --no-edit -m "Automerge release to dev"
            git push origin dev
  publish-latest:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Verify branch of origin
          command: |
            if [ -z "$CIRCLE_TAG" ]
            then
               # If we're not actually working from a tag, then just exit. We only want to deploy tags.
               exit 1
            fi
            # For these two exports, the git command is logging out every local and remote branch that contains the tag.
            # That gets piped into a grep command so we can look for specific branches in the results.
            export CONTAINED_IN_RELEASE=$(git branch -a --contains tags/$CIRCLE_TAG|grep release)
            export CONTAINED_IN_MASTER=$(git branch -a --contains tags/$CIRCLE_TAG|grep master)
            # Our typical flow is feature branch -> dev -> release -> master. We want to publish tags based on release.
            # So we'll abort if the tag isn't present in release, or if it's present in master.
            if [ -z "$CONTAINED_IN_RELEASE" ] || [ -n "$CONTAINED_IN_MASTER" ]
            then
               exit 1
            fi

      - run:
          command: npm run prepack
      # Update the path so that node modules installed by the release-management orb are found
      # See https://discuss.circleci.com/t/how-to-add-a-path-to-path-in-circle-2-0/11554
      - run: echo 'export PATH=$HOME/.config/yarn/global/node_modules/.bin:$PATH' >> $BASH_ENV
      - release-management/sign
      - release-management/publish:
          access: public
          tag: latest
          use_tarfile: true
      - release-management/create-github-release
    environment:
      # Fingerprint for developer.salesforce.com
      SFDX_DEVELOPER_TRUSTED_FINGERPRINT: "C3:62:4A:98:74:67:F1:33:E9:F3:B9:74:55:C5:63:FE:49:E4:67:E8"

workflows:
  version: 2.1
  test-publish:
    jobs:
      # Step 1: Run the unit tests on Linux. This happens first because the build step is also done here.
      - linux-unit-tests:
          filters:
            # We want this to run against all tags and branches. Branches are inclusive by default, so we don't need to
            # specify anything. But tags are exclusive by default, so we need to specify that all tags should be included.
            tags:
              only: /.*/
      # Step 2: Run the unit tests on Windows.
      - windows-unit-tests:
          requires:
            - linux-unit-tests
      # Step 3A: Run the plugin against itself.
      - self-evaluation:
          requires:
            - windows-unit-tests
      # Step 3B: Run the Linux smoke tests against the tarball.
      - linux-tarball-smoke-tests:
          requires:
            - windows-unit-tests
      # Step 4: Run the Windows smoke tests. Do this after the Linux tests because those tests create the tarball.
      - windows-tarball-smoke-tests:
          requires:
            - linux-tarball-smoke-tests
      # Step 5: Publish the build.
      - publish-latest:
          # All of the smoke tests and the self-evaluation must be successful before we can publish.
          requires:
            - self-evaluation
            - windows-tarball-smoke-tests
          filters:
            # We never want to publish branches, so we need to explicitly ignore all of them.
            branches:
              ignore: /.*/
            # We want to publish any tags that are formatted vXXXX, since that's our semantic versioning syntax.
            tags:
              only:
                /^v.*/
      # Step 6: After publishing, run a sanity test against the published version.
      - packaged-sanity:
          requires:
            - publish-latest
          filters:
            # We never want to publish branches, so we need to explicitly ignore all of them.
            branches:
              ignore: /.*/
            # We want to publish any tags that are formatted vXXXX, since that's our semantic versioning syntax.
            tags:
              only:
                /^v.*/
