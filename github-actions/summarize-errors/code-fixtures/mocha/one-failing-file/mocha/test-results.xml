<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="32.7850" tests="347" failures="3">
  <testsuite name="Root Suite" timestamp="2023-01-05T22:10:51" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Controller.ts tests" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/Controller.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#getAllEngines()" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/Controller.test.ts" time="0.0080" failures="0">
    <testcase name="Controller.ts tests #getAllEngines() Returns literally all engines" time="0.0040" classname="Returns literally all engines">
    </testcase>
  </testsuite>
  <testsuite name="#getEnabledEngines()" timestamp="2023-01-05T22:10:51" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/Controller.test.ts" time="0.0150" failures="0">
    <testcase name="Controller.ts tests #getEnabledEngines() When engineOptions is empty, returns only engines that are non-custom, enabled, and requested-by-default" time="0.0020" classname="When engineOptions is empty, returns only engines that are non-custom, enabled, and requested-by-default">
    </testcase>
    <testcase name="Controller.ts tests #getEnabledEngines() When engineOptions includes custom pmd config, PmdCustomEngine is included" time="0.0010" classname="When engineOptions includes custom pmd config, PmdCustomEngine is included">
    </testcase>
    <testcase name="Controller.ts tests #getEnabledEngines() When engineOptions includes custom eslint config, CustomEslintEngine is included" time="0.0020" classname="When engineOptions includes custom eslint config, CustomEslintEngine is included">
    </testcase>
    <testcase name="Controller.ts tests #getEnabledEngines() When engineOptions includes both custom pmd and custom eslint configs, both custom engines are included" time="0.0010" classname="When engineOptions includes both custom pmd and custom eslint configs, both custom engines are included">
    </testcase>
    <testcase name="Controller.ts tests #getEnabledEngines() When no engines are found, error is thrown" time="0.0010" classname="When no engines are found, error is thrown">
    </testcase>
  </testsuite>
  <testsuite name="#getFilteredEngines()" timestamp="2023-01-05T22:10:51" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/Controller.test.ts" time="0.0110" failures="0">
    <testcase name="Controller.ts tests #getFilteredEngines() If no filtering is provided, only requested-by-default engines are returned" time="0.0010" classname="If no filtering is provided, only requested-by-default engines are returned">
    </testcase>
    <testcase name="Controller.ts tests #getFilteredEngines() Even a disabled engine is included when explicitly requested" time="0.0010" classname="Even a disabled engine is included when explicitly requested">
    </testcase>
    <testcase name="Controller.ts tests #getFilteredEngines() When custom config information is provided, the correct instance is returned" time="0.0020" classname="When custom config information is provided, the correct instance is returned">
    </testcase>
    <testcase name="Controller.ts tests #getFilteredEngines() When no engines are found, exception is thrown" time="0.0010" classname="When no engines are found, exception is thrown">
    </testcase>
  </testsuite>
  <testsuite name="CpdEngine" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/cpd/CpdEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="shouldEngineRun()" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/cpd/CpdEngine.test.ts" time="0.0010" failures="0">
    <testcase name="CpdEngine shouldEngineRun() should always return true if the engine was not filtered out" time="0.0000" classname="should always return true if the engine was not filtered out">
    </testcase>
  </testsuite>
  <testsuite name="sortPaths()" timestamp="2023-01-05T22:10:51" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/cpd/CpdEngine.test.ts" time="0.0020" failures="0">
    <testcase name="CpdEngine sortPaths() should return the correct map based on valid cpd files and targets given" time="0.0000" classname="should return the correct map based on valid cpd files and targets given">
    </testcase>
    <testcase name="CpdEngine sortPaths() should compare extensions case-insensitively" time="0.0000" classname="should compare extensions case-insensitively">
    </testcase>
  </testsuite>
  <testsuite name="isEngineRequested()" timestamp="2023-01-05T22:10:51" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/cpd/CpdEngine.test.ts" time="0.0030" failures="0">
    <testcase name="CpdEngine isEngineRequested() should return true if filter contains &quot;cpd&quot; and engineOptions map is empty" time="0.0000" classname="should return true if filter contains &quot;cpd&quot; and engineOptions map is empty">
    </testcase>
    <testcase name="CpdEngine isEngineRequested() should return true if filter contains &quot;cpd&quot; and engineOptions map contains eslint config" time="0.0010" classname="should return true if filter contains &quot;cpd&quot; and engineOptions map contains eslint config">
    </testcase>
    <testcase name="CpdEngine isEngineRequested() should return true if filter contains &quot;cpd&quot; and engineOptions map contains pmd config" time="0.0000" classname="should return true if filter contains &quot;cpd&quot; and engineOptions map contains pmd config">
    </testcase>
    <testcase name="CpdEngine isEngineRequested() should return false if filter does not contain &quot;cpd&quot; irrespective of engineOptions" time="0.0000" classname="should return false if filter does not contain &quot;cpd&quot; irrespective of engineOptions">
    </testcase>
  </testsuite>
  <testsuite name="CustomRulePathManager tests" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/CustomRulePathManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Rule path entries creation" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/CustomRulePathManager.test.ts" time="0.0000" failures="0">
    <testcase name="CustomRulePathManager tests Rule path entries creation should handle empty Rule Path file gracefully" time="0.0020" classname="should handle empty Rule Path file gracefully">
    </testcase>
  </testsuite>
  <testsuite name="with pre-populated file" timestamp="2023-01-05T22:10:51" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/CustomRulePathManager.test.ts" time="0.0040" failures="0">
    <testcase name="CustomRulePathManager tests Rule path entries creation with pre-populated file should read CustomPaths.json to get Rule Path Entries" time="0.0010" classname="should read CustomPaths.json to get Rule Path Entries">
    </testcase>
    <testcase name="CustomRulePathManager tests Rule path entries creation with pre-populated file should initialize only once" time="0.0010" classname="should initialize only once">
    </testcase>
  </testsuite>
  <testsuite name="Adding new Rule path entries" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/CustomRulePathManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Test Case: Adding individual files" timestamp="2023-01-05T22:10:51" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/CustomRulePathManager.test.ts" time="0.0070" failures="0">
    <testcase name="CustomRulePathManager tests Adding new Rule path entries Test Case: Adding individual files Should reflect any new entries" time="0.0020" classname="Should reflect any new entries">
    </testcase>
    <testcase name="CustomRulePathManager tests Adding new Rule path entries Test Case: Adding individual files Should append new entries to any existing entries for the language" time="0.0020" classname="Should append new entries to any existing entries for the language">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Adding the contents of a folder" timestamp="2023-01-05T22:10:51" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/CustomRulePathManager.test.ts" time="0.0080" failures="0">
    <testcase name="CustomRulePathManager tests Adding new Rule path entries Test Case: Adding the contents of a folder Should reflect newly added entries" time="0.0020" classname="Should reflect newly added entries">
    </testcase>
    <testcase name="CustomRulePathManager tests Adding new Rule path entries Test Case: Adding the contents of a folder Should append new entries to any existing entries for language" time="0.0020" classname="Should append new entries to any existing entries for language">
    </testcase>
  </testsuite>
  <testsuite name="Tests for BaseEslintEngine" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Tests for shouldEngineRun()" timestamp="2023-01-05T22:10:51" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0040" failures="0">
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to not run when target is empty" time="0.0000" classname="should decide to not run when target is empty">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to not run when rules are empty" time="0.0000" classname="should decide to not run when rules are empty">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to not run when EngineOptions has eslint custom config" time="0.0000" classname="should decide to not run when EngineOptions has eslint custom config">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to run when target, rules and options look right" time="0.0000" classname="should decide to run when target, rules and options look right">
    </testcase>
  </testsuite>
  <testsuite name="Tests for run()" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Related to target input" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0030" failures="0">
    <testcase name="Tests for BaseEslintEngine Tests for run() Related to target input should use target as current working directory if target is a directory" time="0.0020" classname="should use target as current working directory if target is a directory">
    </testcase>
  </testsuite>
  <testsuite name="Related to rules input" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0010" failures="0">
    <testcase name="Tests for BaseEslintEngine Tests for run() Related to rules input should not execute when rules are empty" time="0.0000" classname="should not execute when rules are empty">
    </testcase>
  </testsuite>
  <testsuite name="Rule mapping" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0020" failures="0">
    <testcase name="Tests for BaseEslintEngine Tests for run() Rule mapping should map Eslint-rule to sfdx scanner rule structure" time="0.0010" classname="should map Eslint-rule to sfdx scanner rule structure">
    </testcase>
  </testsuite>
  <testsuite name="Tests for getCatalog()" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Related to mapping all rules to Catalog" timestamp="2023-01-05T22:10:51" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0030" failures="0">
    <testcase name="Tests for BaseEslintEngine Tests for getCatalog() Related to mapping all rules to Catalog should map ESRules to Catalog" time="0.0010" classname="should map ESRules to Catalog">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for getCatalog() Related to mapping all rules to Catalog should add rule to an existing category if applicable" time="0.0000" classname="should add rule to an existing category if applicable">
    </testcase>
  </testsuite>
  <testsuite name="Tests for shouldEngineRun()" timestamp="2023-01-05T22:10:51" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0050" failures="0">
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to run if custom config, rules and target are correct" time="0.0000" classname="should decide to run if custom config, rules and target are correct">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to not run if using custom config" time="0.0000" classname="should decide to not run if using custom config">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to not run if target paths is empty" time="0.0000" classname="should decide to not run if target paths is empty">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to not run if no rules are chosen" time="0.0000" classname="should decide to not run if no rules are chosen">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for shouldEngineRun() should decide to run if using custom config contains PMD but not Eslint" time="0.0000" classname="should decide to run if using custom config contains PMD but not Eslint">
    </testcase>
  </testsuite>
  <testsuite name="Tests for isEngineRequested()" timestamp="2023-01-05T22:10:51" tests="7" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/BaseEslintEngine.test.ts" time="0.0090" failures="0">
    <testcase name="Tests for BaseEslintEngine Tests for isEngineRequested() should return true when custom config is not present and filter contains engine name" time="0.0010" classname="should return true when custom config is not present and filter contains engine name">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for isEngineRequested() should return false when custom config is present even if filter contains engine name" time="0.0010" classname="should return false when custom config is present even if filter contains engine name">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for isEngineRequested() should return false when custom config is not present but filter does not contain engine name" time="0.0000" classname="should return false when custom config is not present but filter does not contain engine name">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for isEngineRequested() should return false when custom config is not present and filter starts with &quot;eslint&quot;" time="0.0000" classname="should return false when custom config is not present and filter starts with &quot;eslint&quot;">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for isEngineRequested() should return true when only PMD custom config is present and filter contains engine name" time="0.0010" classname="should return true when only PMD custom config is present and filter contains engine name">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for isEngineRequested() should return true when custom config is not present and filter is empty" time="0.0000" classname="should return true when custom config is not present and filter is empty">
    </testcase>
    <testcase name="Tests for BaseEslintEngine Tests for isEngineRequested() should return false when custom eslint config is present and filter is empty" time="0.0000" classname="should return false when custom eslint config is present and filter is empty">
    </testcase>
  </testsuite>
  <testsuite name="Tests for CustomEslintEngine" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/CustomEslintEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Testing shouldEngineRun()" timestamp="2023-01-05T22:10:51" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/CustomEslintEngine.test.ts" time="0.0030" failures="0">
    <testcase name="Tests for CustomEslintEngine Testing shouldEngineRun() should decide to run if EngineOptions has custom config for eslint and target is not empty" time="0.0000" classname="should decide to run if EngineOptions has custom config for eslint and target is not empty">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing shouldEngineRun() should decide to not run if EngineOptions is empty" time="0.0000" classname="should decide to not run if EngineOptions is empty">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing shouldEngineRun() should decide to not run if target is empty" time="0.0000" classname="should decide to not run if target is empty">
    </testcase>
  </testsuite>
  <testsuite name="Testing isEngineRequested()" timestamp="2023-01-05T22:10:51" tests="7" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/CustomEslintEngine.test.ts" time="0.0070" failures="0">
    <testcase name="Tests for CustomEslintEngine Testing isEngineRequested() should return true when custom config is present and filter contains &quot;eslint&quot;" time="0.0000" classname="should return true when custom config is present and filter contains &quot;eslint&quot;">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing isEngineRequested() should return true when custom config is present and filter starts with &quot;eslint&quot;" time="0.0000" classname="should return true when custom config is present and filter starts with &quot;eslint&quot;">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing isEngineRequested() should return false when custom config is not present even if filter contains &quot;eslint&quot;" time="0.0000" classname="should return false when custom config is not present even if filter contains &quot;eslint&quot;">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing isEngineRequested() should return false when custom config is present but filter does not contain &quot;eslint&quot;" time="0.0000" classname="should return false when custom config is present but filter does not contain &quot;eslint&quot;">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing isEngineRequested() should return false when only pmd custom config is present even if filter contains &quot;eslint&quot;" time="0.0000" classname="should return false when only pmd custom config is present even if filter contains &quot;eslint&quot;">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing isEngineRequested() should return false when filter is empty and engineOptions is empty" time="0.0000" classname="should return false when filter is empty and engineOptions is empty">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing isEngineRequested() should return true when filter is empty and engineOptions contains eslintconfig" time="0.0000" classname="should return true when filter is empty and engineOptions contains eslintconfig">
    </testcase>
  </testsuite>
  <testsuite name="Testing getCatalog()" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/CustomEslintEngine.test.ts" time="0.0010" failures="0">
    <testcase name="Tests for CustomEslintEngine Testing getCatalog() should return empty catalog" time="0.0000" classname="should return empty catalog">
    </testcase>
  </testsuite>
  <testsuite name="Testing run()" timestamp="2023-01-05T22:10:51" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/CustomEslintEngine.test.ts" time="0.0050" failures="0">
    <testcase name="Tests for CustomEslintEngine Testing run() Throws error when config file path is invalid" time="0.0010" classname="Throws error when config file path is invalid">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing run() Throws error when JSON in config file cannot be parsed" time="0.0000" classname="Throws error when JSON in config file cannot be parsed">
    </testcase>
    <testcase name="Tests for CustomEslintEngine Testing run() Invokes Eslint when config can be fetched" time="0.0010" classname="Invokes Eslint when config can be fetched">
    </testcase>
  </testsuite>
  <testsuite name="JavascriptEslintStrategy" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/JavascriptEslintStrategy.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="processRuleViolation()" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/JavascriptEslintStrategy.test.ts" time="0.0020" failures="0">
    <testcase name="JavascriptEslintStrategy processRuleViolation() Parsing errors are properly handled" time="0.0000" classname="Parsing errors are properly handled">
    </testcase>
  </testsuite>
  <testsuite name="LWCEslintStrategy" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/LWCEslintStrategy.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="processRuleViolation()" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/LWCEslintStrategy.test.ts" time="0.0010" failures="0">
    <testcase name="LWCEslintStrategy processRuleViolation() Parsing errors are properly handled" time="0.0000" classname="Parsing errors are properly handled">
    </testcase>
  </testsuite>
  <testsuite name="TypescriptEslint Strategy" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="processRuleViolation()" timestamp="2023-01-05T22:10:51" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.0030" failures="0">
    <testcase name="TypescriptEslint Strategy processRuleViolation() Parser errors are properly modified" time="0.0000" classname="Parser errors are properly modified">
    </testcase>
    <testcase name="TypescriptEslint Strategy processRuleViolation() Errors about un-included TS files are properly modified" time="0.0000" classname="Errors about un-included TS files are properly modified">
    </testcase>
  </testsuite>
  <testsuite name="filterDisallowedRules()" timestamp="2023-01-05T22:10:51" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.0040" failures="0">
    <testcase name="TypescriptEslint Strategy filterDisallowedRules() Removes deprecated rules" time="0.0000" classname="Removes deprecated rules">
    </testcase>
    <testcase name="TypescriptEslint Strategy filterDisallowedRules() Removes rules that are extended by other rules" time="0.0000" classname="Removes rules that are extended by other rules">
    </testcase>
    <testcase name="TypescriptEslint Strategy filterDisallowedRules() Keeps non-deprecated, non-extended rules" time="0.0010" classname="Keeps non-deprecated, non-extended rules">
    </testcase>
  </testsuite>
  <testsuite name="Test cases with tsconfig.json" timestamp="2023-01-05T22:10:51" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="findTsconfig" timestamp="2023-01-05T22:10:51" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.0040" failures="0">
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json findTsconfig use tsconfig from cwd" time="0.0010" classname="use tsconfig from cwd">
    </testcase>
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json findTsconfig use tsconfig from engineOptions" time="0.0000" classname="use tsconfig from engineOptions">
    </testcase>
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json findTsconfig engineOptions.tsconfig should take precedence over tsconfig.json file found in the current working directory" time="0.0000" classname="engineOptions.tsconfig should take precedence over tsconfig.json file found in the current working directory">
    </testcase>
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json findTsconfig should throw an error if tsconfig is not in current working directory and not specified by engineOptions" time="0.0000" classname="should throw an error if tsconfig is not in current working directory and not specified by engineOptions">
    </testcase>
  </testsuite>
  <testsuite name="checkWorkingDirectoryForTsconfig" timestamp="2023-01-05T22:10:51" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.0030" failures="0">
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json checkWorkingDirectoryForTsconfig finds tsconfig in current working directory" time="0.0010" classname="finds tsconfig in current working directory">
    </testcase>
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json checkWorkingDirectoryForTsconfig does not find tsconfig in current working directory" time="0.0010" classname="does not find tsconfig in current working directory">
    </testcase>
  </testsuite>
  <testsuite name="checkEngineOptionsForTsconfig" timestamp="2023-01-05T22:10:51" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.0040" failures="0">
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json checkEngineOptionsForTsconfig engineOption specifies a valid tsconfig.json" time="0.0000" classname="engineOption specifies a valid tsconfig.json">
    </testcase>
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json checkEngineOptionsForTsconfig engineOption does not specify tsconfig.json" time="0.0000" classname="engineOption does not specify tsconfig.json">
    </testcase>
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json checkEngineOptionsForTsconfig should throw an error if tsconfig.json file specified engineOption does not exist" time="0.0000" classname="should throw an error if tsconfig.json file specified engineOption does not exist">
    </testcase>
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json checkEngineOptionsForTsconfig should throw an error if tsconfig engineOption is found, but is not a file named tsconfig.json" time="0.0000" classname="should throw an error if tsconfig engineOption is found, but is not a file named tsconfig.json">
    </testcase>
  </testsuite>
  <testsuite name="typescript file not in tsconfig.json causes error" timestamp="2023-01-05T22:10:51" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/eslint/TypescriptEslintStrategy.test.ts" time="0.5630" failures="0">
    <testcase name="TypescriptEslint Strategy Test cases with tsconfig.json typescript file not in tsconfig.json causes error The typescript engine should convert the eslint error to something more user friendly" time="0.5590" classname="The typescript engine should convert the eslint error to something more user friendly">
    </testcase>
  </testsuite>
  <testsuite name="RuleResultRecombinator" timestamp="2023-01-05T22:10:52" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#recombineAndReformatResults()" timestamp="2023-01-05T22:10:52" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Output Format: JUnit" timestamp="2023-01-05T22:10:52" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="0.0070" failures="0">
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JUnit Properly handles one file with one violation" time="0.0010" classname="Properly handles one file with one violation">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JUnit Properly handles one file with multiple violations" time="0.0000" classname="Properly handles one file with multiple violations">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JUnit Properly handles multiple files with multiple violations" time="0.0000" classname="Properly handles multiple files with multiple violations">
    </testcase>
  </testsuite>
  <testsuite name="Output Format: Sarif" timestamp="2023-01-05T22:10:52" tests="7" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="24.9160" failures="0">
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: Sarif Happy Path - pathless rules" time="3.5470" classname="Happy Path - pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: Sarif Happy Path - normalized pathless rules" time="3.6720" classname="Happy Path - normalized pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: Sarif Happy Path - DFA rules" time="3.5140" classname="Happy Path - DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: Sarif Happy Path - Normalized DFA rules" time="3.5990" classname="Happy Path - Normalized DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: Sarif DFA with timeout error" time="3.5210" classname="DFA with timeout error">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: Sarif Handles all pathless engines" time="3.4970" classname="Handles all pathless engines">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: Sarif Run with no violations returns engines that were run" time="3.5520" classname="Run with no violations returns engines that were run">
    </testcase>
  </testsuite>
  <testsuite name="Output Format: JSON" timestamp="2023-01-05T22:11:17" tests="6" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="0.0110" failures="0">
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JSON Happy Path - pathless rules" time="0.0010" classname="Happy Path - pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JSON Happy Path - normalized pathless rules" time="0.0000" classname="Happy Path - normalized pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JSON Happy path - DFA rules" time="0.0010" classname="Happy path - DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JSON Happy path - normalized DFA rules" time="0.0000" classname="Happy path - normalized DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JSON Using --verbose-violations" time="0.0000" classname="Using --verbose-violations">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: JSON Edge Cases" time="0.0000" classname="Edge Cases">
    </testcase>
  </testsuite>
  <testsuite name="Output Format: XML" timestamp="2023-01-05T22:11:17" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="0.0140" failures="0">
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: XML Happy Path - pathless rules" time="0.0040" classname="Happy Path - pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: XML Happy Path - normalized pathless rules" time="0.0010" classname="Happy Path - normalized pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: XML Happy path - DFA rules" time="0.0020" classname="Happy path - DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: XML Happy path - normalized DFA rules" time="0.0000" classname="Happy path - normalized DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: XML Edge Cases" time="0.0010" classname="Edge Cases">
    </testcase>
  </testsuite>
  <testsuite name="Output Format: CSV" timestamp="2023-01-05T22:11:17" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="0.0130" failures="0">
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: CSV Happy Path - pathless rules" time="0.0050" classname="Happy Path - pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: CSV Happy Path - normalized pathless rules" time="0.0010" classname="Happy Path - normalized pathless rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: CSV Happy path - DFA rules" time="0.0000" classname="Happy path - DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: CSV Happy path - Normalized DFA rules" time="0.0010" classname="Happy path - Normalized DFA rules">
    </testcase>
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: CSV Edge Cases" time="0.0010" classname="Edge Cases">
    </testcase>
  </testsuite>
  <testsuite name="Output Format: HTML" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/formatter/RuleResultRecombinator.test.ts" time="0.0080" failures="0">
    <testcase name="RuleResultRecombinator #recombineAndReformatResults() Output Format: HTML Using --verbose-violations" time="0.0050" classname="Using --verbose-violations">
    </testcase>
  </testsuite>
  <testsuite name="JreSetupManager #verifyJreSetup" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/JreSetupManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="With valid javaHome path in Config and an accepted Java version" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/JreSetupManager.test.ts" time="0.0020" failures="0">
    <testcase name="JreSetupManager #verifyJreSetup With valid javaHome path in Config and an accepted Java version should set correct Key in config" time="0.0010" classname="should set correct Key in config">
    </testcase>
  </testsuite>
  <testsuite name="With no Config entry, but valid path in System variable" timestamp="2023-01-05T22:11:17" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/JreSetupManager.test.ts" time="0.0040" failures="0">
    <testcase name="JreSetupManager #verifyJreSetup With no Config entry, but valid path in System variable should check JAVA_HOME for path" time="0.0010" classname="should check JAVA_HOME for path">
    </testcase>
    <testcase name="JreSetupManager #verifyJreSetup With no Config entry, but valid path in System variable should check JRE_HOME for path" time="0.0000" classname="should check JRE_HOME for path">
    </testcase>
    <testcase name="JreSetupManager #verifyJreSetup With no Config entry, but valid path in System variable should check JDK_HOME for path" time="0.0010" classname="should check JDK_HOME for path">
    </testcase>
  </testsuite>
  <testsuite name="With no Config entry or System variable, but can auto detect a valid javaHome" timestamp="2023-01-05T22:11:17" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/JreSetupManager.test.ts" time="0.0030" failures="0">
    <testcase name="JreSetupManager #verifyJreSetup With no Config entry or System variable, but can auto detect a valid javaHome should handle successful javaHome auto detection" time="0.0000" classname="should handle successful javaHome auto detection">
    </testcase>
    <testcase name="JreSetupManager #verifyJreSetup With no Config entry or System variable, but can auto detect a valid javaHome should handle failed javaHome auto detection" time="0.0010" classname="should handle failed javaHome auto detection">
    </testcase>
  </testsuite>
  <testsuite name="With Config entry leading to different outcomes" timestamp="2023-01-05T22:11:17" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/JreSetupManager.test.ts" time="0.0070" failures="0">
    <testcase name="JreSetupManager #verifyJreSetup With Config entry leading to different outcomes should fail when invalid path is found" time="0.0000" classname="should fail when invalid path is found">
    </testcase>
    <testcase name="JreSetupManager #verifyJreSetup With Config entry leading to different outcomes should fail when valid path is found, but Java version is not acceptable" time="0.0000" classname="should fail when valid path is found, but Java version is not acceptable">
    </testcase>
    <testcase name="JreSetupManager #verifyJreSetup With Config entry leading to different outcomes should finish successfully when Java11 is found" time="0.0010" classname="should finish successfully when Java11 is found">
    </testcase>
    <testcase name="JreSetupManager #verifyJreSetup With Config entry leading to different outcomes should finish successfully when Java14 is found on Windows" time="0.0010" classname="should finish successfully when Java14 is found on Windows">
    </testcase>
  </testsuite>
  <testsuite name="Tests for CustomPmdEngine implementation" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/CustomPmdEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="shouldEngineRun() for CustomPmdEngine" timestamp="2023-01-05T22:11:17" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/CustomPmdEngine.test.ts" time="0.0030" failures="0">
    <testcase name="Tests for CustomPmdEngine implementation shouldEngineRun() for CustomPmdEngine should decide to run when engineOptions map contains pmdconfig" time="0.0000" classname="should decide to run when engineOptions map contains pmdconfig">
    </testcase>
    <testcase name="Tests for CustomPmdEngine implementation shouldEngineRun() for CustomPmdEngine should decide to NOT run when engineOptions map does not contain pmdconfig" time="0.0000" classname="should decide to NOT run when engineOptions map does not contain pmdconfig">
    </testcase>
    <testcase name="Tests for CustomPmdEngine implementation shouldEngineRun() for CustomPmdEngine should decide to NOT run when engineOptions map does not contain pmdconfig but only Eslint config" time="0.0000" classname="should decide to NOT run when engineOptions map does not contain pmdconfig but only Eslint config">
    </testcase>
  </testsuite>
  <testsuite name="Tests for isEngineRequested()" timestamp="2023-01-05T22:11:17" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/CustomPmdEngine.test.ts" time="0.0140" failures="0">
    <testcase name="Tests for CustomPmdEngine implementation Tests for isEngineRequested() should return true when custom config is present and filter contains &quot;pmd&quot;" time="0.0000" classname="should return true when custom config is present and filter contains &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for CustomPmdEngine implementation Tests for isEngineRequested() should return false when custom config is present but filter does not contain &quot;pmd&quot;" time="0.0000" classname="should return false when custom config is present but filter does not contain &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for CustomPmdEngine implementation Tests for isEngineRequested() should return false when custom config is not present even if filter contains &quot;pmd&quot;" time="0.0000" classname="should return false when custom config is not present even if filter contains &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for CustomPmdEngine implementation Tests for isEngineRequested() should return true when custom config is present and filter contains a string that starts with &quot;pmd&quot;" time="0.0000" classname="should return true when custom config is present and filter contains a string that starts with &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for CustomPmdEngine implementation Tests for isEngineRequested() should return false when custom config for eslint is present and filter contains &quot;pmd&quot;" time="0.0000" classname="should return false when custom config for eslint is present and filter contains &quot;pmd&quot;">
    </testcase>
  </testsuite>
  <testsuite name="tests for run()" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/CustomPmdEngine.test.ts" time="0.0020" failures="0">
    <testcase name="Tests for CustomPmdEngine implementation tests for run() should throw error when Config file does not exist" time="0.0000" classname="should throw error when Config file does not exist">
    </testcase>
  </testsuite>
  <testsuite name="PmdCatalogWrapper" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="buildCommandArray()" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="JAR parameters" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Common to all scenarios" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.0990" failures="0">
    <testcase name="PmdCatalogWrapper buildCommandArray() JAR parameters Common to all scenarios uses the correct common parameter values" time="0.0980" classname="uses the correct common parameter values">
    </testcase>
  </testsuite>
  <testsuite name="When Custom PMD JARs have been registered for a language whose default PMD rules are off..." timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.0930" failures="0">
    <testcase name="PmdCatalogWrapper buildCommandArray() JAR parameters When Custom PMD JARs have been registered for a language whose default PMD rules are off... Custom PMD JARs are included" time="0.0900" classname="Custom PMD JARs are included">
    </testcase>
  </testsuite>
  <testsuite name="When Custom PMD JARs have been registered for a language under a weird alias..." timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.1100" failures="0">
    <testcase name="PmdCatalogWrapper buildCommandArray() JAR parameters When Custom PMD JARs have been registered for a language under a weird alias... Custom PMD JARs are included" time="0.1060" classname="Custom PMD JARs are included">
    </testcase>
  </testsuite>
  <testsuite name="When not all supported languages have an associated PMD JAR" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.0980" failures="0">
    <testcase name="PmdCatalogWrapper buildCommandArray() JAR parameters When not all supported languages have an associated PMD JAR should not include a supported language as input to PmdCataloger if the language has no associated path" time="0.0960" classname="should not include a supported language as input to PmdCataloger if the language has no associated path">
    </testcase>
  </testsuite>
  <testsuite name="Missing Rule Files are Handled Gracefully" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdCatalogWrapper.test.ts" time="0.0030" failures="0">
    <testcase name="PmdCatalogWrapper buildCommandArray() JAR parameters Missing Rule Files are Handled Gracefully Missing file should be filtered out and display warning" time="0.0000" classname="Missing file should be filtered out and display warning">
    </testcase>
  </testsuite>
  <testsuite name="Tests for BasePmdEngine and PmdEngine implementation" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="processStdOut()" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0070" failures="0">
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation processStdOut() Nodes that do not represent violations are filtered out of results" time="0.0060" classname="Nodes that do not represent violations are filtered out of results">
    </testcase>
  </testsuite>
  <testsuite name="processStdErr()" timestamp="2023-01-05T22:11:17" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0030" failures="0">
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation processStdErr() Converts PMD&apos;s RuleSetNotFoundException into a more readable message" time="0.0000" classname="Converts PMD&apos;s RuleSetNotFoundException into a more readable message">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation processStdErr() If PMD&apos;s error matches no simplification templates, the error is returned as-is" time="0.0010" classname="If PMD&apos;s error matches no simplification templates, the error is returned as-is">
    </testcase>
  </testsuite>
  <testsuite name="emitErrorsAndWarnings()" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0040" failures="0">
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation emitErrorsAndWarnings() Non file XML nodes are filtered converted to UX events" time="0.0030" classname="Non file XML nodes are filtered converted to UX events">
    </testcase>
  </testsuite>
  <testsuite name="#filterSkippedRulesFromResults()" timestamp="2023-01-05T22:11:17" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0040" failures="0">
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation #filterSkippedRulesFromResults() Only the specified rules are filtered" time="0.0000" classname="Only the specified rules are filtered">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation #filterSkippedRulesFromResults() If all violations are filtered, the result in question is dropped" time="0.0000" classname="If all violations are filtered, the result in question is dropped">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation #filterSkippedRulesFromResults() The first time a rule is skipped, a warning should be logged" time="0.0000" classname="The first time a rule is skipped, a warning should be logged">
    </testcase>
  </testsuite>
  <testsuite name="processStdout unusual cases" timestamp="2023-01-05T22:11:17" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0030" failures="0">
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation processStdout unusual cases Empty stdout" time="0.0000" classname="Empty stdout">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation processStdout unusual cases Missing closing tag" time="0.0000" classname="Missing closing tag">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation processStdout unusual cases Missing opening tag" time="0.0000" classname="Missing opening tag">
    </testcase>
  </testsuite>
  <testsuite name="testing shouldEngineRun()" timestamp="2023-01-05T22:11:17" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0050" failures="0">
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation testing shouldEngineRun() should decide to NOT run when engineOptions map contains pmdconfig" time="0.0000" classname="should decide to NOT run when engineOptions map contains pmdconfig">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation testing shouldEngineRun() should decide to NOT run when RuleGroup is empty" time="0.0000" classname="should decide to NOT run when RuleGroup is empty">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation testing shouldEngineRun() should decide to run when engineOptions map does not contain pmdconfig" time="0.0000" classname="should decide to run when engineOptions map does not contain pmdconfig">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation testing shouldEngineRun() should decide to run when engineOptions map contains only eslint config" time="0.0000" classname="should decide to run when engineOptions map contains only eslint config">
    </testcase>
  </testsuite>
  <testsuite name="tests for isEngineRequested()" timestamp="2023-01-05T22:11:17" tests="7" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdEngine.test.ts" time="0.0070" failures="0">
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation tests for isEngineRequested() should return true when custom config is not present and filter contains &quot;pmd&quot;" time="0.0000" classname="should return true when custom config is not present and filter contains &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation tests for isEngineRequested() should return false when custom config is not present but filter does not contain &quot;pmd&quot;" time="0.0000" classname="should return false when custom config is not present but filter does not contain &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation tests for isEngineRequested() should return false when custom config is present even if filter contains &quot;pmd&quot;" time="0.0000" classname="should return false when custom config is present even if filter contains &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation tests for isEngineRequested() should return false when custom config is not present and if filter contains a value that starts with &quot;pmd&quot;" time="0.0000" classname="should return false when custom config is not present and if filter contains a value that starts with &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation tests for isEngineRequested() should return true when custom config for only eslint is present and filter contains &quot;pmd&quot;" time="0.0000" classname="should return true when custom config for only eslint is present and filter contains &quot;pmd&quot;">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation tests for isEngineRequested() should return false when custom config exists and filter is empty" time="0.0000" classname="should return false when custom config exists and filter is empty">
    </testcase>
    <testcase name="Tests for BasePmdEngine and PmdEngine implementation tests for isEngineRequested() should return true when custom config is not present and filter is empty" time="0.0000" classname="should return true when custom config is not present and filter is empty">
    </testcase>
  </testsuite>
  <testsuite name="PmdLanguageManager" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdLanguageManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getSupportedLanguages()" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdLanguageManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="When Config specifies exact language names" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdLanguageManager.test.ts" time="0.0010" failures="0">
    <testcase name="PmdLanguageManager getSupportedLanguages() When Config specifies exact language names Explicitly supported languages are returned" time="0.0000" classname="Explicitly supported languages are returned">
    </testcase>
  </testsuite>
  <testsuite name="When Config specifies weirdly aliased language names" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdLanguageManager.test.ts" time="0.0010" failures="0">
    <testcase name="PmdLanguageManager getSupportedLanguages() When Config specifies weirdly aliased language names Aliases are successfully resolved into a viable language name" time="0.0000" classname="Aliases are successfully resolved into a viable language name">
    </testcase>
  </testsuite>
  <testsuite name="When Config specifies invalid language alias" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdLanguageManager.test.ts" time="0.0030" failures="0">
    <testcase name="PmdLanguageManager getSupportedLanguages() When Config specifies invalid language alias When no viable alias is found, an error is thrown" time="0.0010" classname="When no viable alias is found, an error is thrown">
    </testcase>
  </testsuite>
  <testsuite name="When Javascript appears in config()" timestamp="2023-01-05T22:11:17" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/pmd/PmdLanguageManager.test.ts" time="0.0020" failures="0">
    <testcase name="PmdLanguageManager getSupportedLanguages() When Javascript appears in config() Throws exception if javascript is found in supportedLanguages array" time="0.0000" classname="Throws exception if javascript is found in supportedLanguages array">
    </testcase>
  </testsuite>
  <testsuite name="RetireJsEngine" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createTmpDirWithDuplicatedTargets()" timestamp="2023-01-05T22:11:17" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Text files" timestamp="2023-01-05T22:11:17" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0120" failures="0">
    <testcase name="RetireJsEngine createTmpDirWithDuplicatedTargets() Text files Files with a .js extension are duplicated" time="0.0040" classname="Files with a .js extension are duplicated">
    </testcase>
    <testcase name="RetireJsEngine createTmpDirWithDuplicatedTargets() Text files Files with a .resource extension are duplicated and given a .js alias" time="0.0030" classname="Files with a .resource extension are duplicated and given a .js alias">
    </testcase>
    <testcase name="RetireJsEngine createTmpDirWithDuplicatedTargets() Text files Files accompanied by a .resource-meta.xml file are duplicated and given a .js alias" time="0.0020" classname="Files accompanied by a .resource-meta.xml file are duplicated and given a .js alias">
    </testcase>
  </testsuite>
  <testsuite name="Binary files" timestamp="2023-01-05T22:11:17" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.1470" failures="0">
    <testcase name="RetireJsEngine createTmpDirWithDuplicatedTargets() Binary files ZIPs are extracted, and text files within are aliased" time="0.1120" classname="ZIPs are extracted, and text files within are aliased">
    </testcase>
    <testcase name="RetireJsEngine createTmpDirWithDuplicatedTargets() Binary files Non-ZIP binary files are ignored" time="0.0320" classname="Non-ZIP binary files are ignored">
    </testcase>
  </testsuite>
  <testsuite name="processOutput()" timestamp="2023-01-05T22:11:18" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0000" failures="0">
    <testcase name="RetireJsEngine processOutput() Properly dealiases and processes results from files" time="0.0000" classname="Properly dealiases and processes results from files">
    </testcase>
    <testcase name="RetireJsEngine processOutput() Properly generates message for --verbose-violations" time="0.0000" classname="Properly generates message for --verbose-violations">
    </testcase>
    <testcase name="RetireJsEngine processOutput() Corner Case: When file has multiple aliases, results are consolidated" time="0.0000" classname="Corner Case: When file has multiple aliases, results are consolidated">
    </testcase>
  </testsuite>
  <testsuite name="Error handling" timestamp="2023-01-05T22:11:18" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0020" failures="0">
    <testcase name="RetireJsEngine processOutput() Error handling Throws user-friendly error for un-parsable JSON" time="0.0000" classname="Throws user-friendly error for un-parsable JSON">
    </testcase>
    <testcase name="RetireJsEngine processOutput() Error handling Throws user-friendly error for improperly formed JSON" time="0.0000" classname="Throws user-friendly error for improperly formed JSON">
    </testcase>
  </testsuite>
  <testsuite name="shouldEngineRun()" timestamp="2023-01-05T22:11:18" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0010" failures="0">
    <testcase name="RetireJsEngine shouldEngineRun() should always return true if the engine was not filtered out" time="0.0000" classname="should always return true if the engine was not filtered out">
    </testcase>
  </testsuite>
  <testsuite name="isEngineRequested()" timestamp="2023-01-05T22:11:18" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0030" failures="0">
    <testcase name="RetireJsEngine isEngineRequested() should return true if filter contains &quot;retire-js&quot; and engineOptions map is empty" time="0.0000" classname="should return true if filter contains &quot;retire-js&quot; and engineOptions map is empty">
    </testcase>
    <testcase name="RetireJsEngine isEngineRequested() should return true if filter contains &quot;retire-js&quot; and engineOptions map contains eslint config" time="0.0000" classname="should return true if filter contains &quot;retire-js&quot; and engineOptions map contains eslint config">
    </testcase>
    <testcase name="RetireJsEngine isEngineRequested() should return true if filter contains &quot;retire-js&quot; and engineOptions map contains pmd config" time="0.0000" classname="should return true if filter contains &quot;retire-js&quot; and engineOptions map contains pmd config">
    </testcase>
    <testcase name="RetireJsEngine isEngineRequested() should return false if filter does not contain &quot;retire-js&quot; irrespective of engineOptions" time="0.0000" classname="should return false if filter does not contain &quot;retire-js&quot; irrespective of engineOptions">
    </testcase>
  </testsuite>
  <testsuite name="buildCliInvocations()" timestamp="2023-01-05T22:11:18" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/retire-js/RetireJsEngine.test.ts" time="0.0010" failures="0">
    <testcase name="RetireJsEngine buildCliInvocations() Properly invokes Insecure Bundled Dependencies rule" time="0.0000" classname="Properly invokes Insecure Bundled Dependencies rule">
    </testcase>
  </testsuite>
  <testsuite name="RuleFilter" timestamp="2023-01-05T22:11:18" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Positive Cases" timestamp="2023-01-05T22:11:18" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0000" failures="0">
    <testcase name="RuleFilter Positive Cases Values are trimmed" time="0.0000" classname="Values are trimmed">
    </testcase>
    <testcase name="RuleFilter Positive Cases Negated values are converted" time="0.0000" classname="Negated values are converted">
    </testcase>
    <testcase name="RuleFilter Positive Cases isRuleGroupFilter" time="0.0000" classname="isRuleGroupFilter">
    </testcase>
    <testcase name="RuleFilter Positive Cases isEngineFilter" time="0.0000" classname="isEngineFilter">
    </testcase>
  </testsuite>
  <testsuite name="getRuleValues" timestamp="2023-01-05T22:11:18" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0040" failures="0">
    <testcase name="RuleFilter Positive Cases getRuleValues CategoryFilter" time="0.0000" classname="CategoryFilter">
    </testcase>
    <testcase name="RuleFilter Positive Cases getRuleValues CategoryFilter" time="0.0000" classname="CategoryFilter">
    </testcase>
    <testcase name="RuleFilter Positive Cases getRuleValues LanguageFilter" time="0.0000" classname="LanguageFilter">
    </testcase>
    <testcase name="RuleFilter Positive Cases getRuleValues RulenameFilter" time="0.0000" classname="RulenameFilter">
    </testcase>
    <testcase name="RuleFilter Positive Cases getRuleValues SourcePackageFilter" time="0.0000" classname="SourcePackageFilter">
    </testcase>
  </testsuite>
  <testsuite name="matchesRuleGroup" timestamp="2023-01-05T22:11:18" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="CategoryFilter" timestamp="2023-01-05T22:11:18" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0040" failures="0">
    <testcase name="RuleFilter Positive Cases matchesRuleGroup CategoryFilter Positive Filters" time="0.0000" classname="Positive Filters">
    </testcase>
    <testcase name="RuleFilter Positive Cases matchesRuleGroup CategoryFilter Negated Filters" time="0.0000" classname="Negated Filters">
    </testcase>
  </testsuite>
  <testsuite name="matchesRule" timestamp="2023-01-05T22:11:18" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="CategoryFilter" timestamp="2023-01-05T22:11:18" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0020" failures="0">
    <testcase name="RuleFilter Positive Cases matchesRule CategoryFilter Positive Filters" time="0.0010" classname="Positive Filters">
    </testcase>
    <testcase name="RuleFilter Positive Cases matchesRule CategoryFilter Negated Filters" time="0.0000" classname="Negated Filters">
    </testcase>
  </testsuite>
  <testsuite name="Negative Cases" timestamp="2023-01-05T22:11:18" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleFilter.test.ts" time="0.0010" failures="0">
    <testcase name="RuleFilter Negative Cases Negated values for Positive Filter throws Exception" time="0.0000" classname="Negated values for Positive Filter throws Exception">
    </testcase>
    <testcase name="RuleFilter Negative Cases Mixed types throws Exception" time="0.0000" classname="Mixed types throws Exception">
    </testcase>
  </testsuite>
  <testsuite name="RuleManager" timestamp="2023-01-05T22:11:18" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getRulesMatchingCriteria()" timestamp="2023-01-05T22:11:18" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Test Case: No filters provided" timestamp="2023-01-05T22:11:18" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0020" failures="0">
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: No filters provided When no filters are provided, all default-enabled rules are returned" time="0.0010" classname="When no filters are provided, all default-enabled rules are returned">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Filtering by category only" timestamp="2023-01-05T22:11:18" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0030" failures="0">
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: Filtering by category only Filtering by one category returns only rules in that category" time="0.0000" classname="Filtering by one category returns only rules in that category">
    </testcase>
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: Filtering by category only Filtering by multiple categories returns any rule in either category" time="0.0010" classname="Filtering by multiple categories returns any rule in either category">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Filtering by ruleset only" timestamp="2023-01-05T22:11:18" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0030" failures="0">
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: Filtering by ruleset only Filtering by a single ruleset returns only the rules in that ruleset" time="0.0010" classname="Filtering by a single ruleset returns only the rules in that ruleset">
    </testcase>
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: Filtering by ruleset only Filtering by multiple rulesets returns any rule in either ruleset" time="0.0010" classname="Filtering by multiple rulesets returns any rule in either ruleset">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Filtering by language" timestamp="2023-01-05T22:11:18" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0050" failures="0">
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: Filtering by language Filtering by a single language returns only rules targeting that language" time="0.0000" classname="Filtering by a single language returns only rules targeting that language">
    </testcase>
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: Filtering by language Filtering by multiple languages returns any rule targeting either language" time="0.0010" classname="Filtering by multiple languages returns any rule targeting either language">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Mixing filter types" timestamp="2023-01-05T22:11:18" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0010" failures="0">
    <testcase name="RuleManager getRulesMatchingCriteria() Test Case: Mixing filter types Filtering on multiple columns at once returns only rules that satisfy ALL filters" time="0.0010" classname="Filtering on multiple columns at once returns only rules that satisfy ALL filters">
    </testcase>
  </testsuite>
  <testsuite name="Edge Case: No rules match criteria" timestamp="2023-01-05T22:11:18" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0020" failures="0">
    <testcase name="RuleManager getRulesMatchingCriteria() Edge Case: No rules match criteria When no rules match the given criteria, an empty list is returned" time="0.0010" classname="When no rules match the given criteria, an empty list is returned">
    </testcase>
  </testsuite>
  <testsuite name="runRulesMatchingCriteria()" timestamp="2023-01-05T22:11:18" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Test Case: Run against test projects" timestamp="2023-01-05T22:11:18" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Test Case: Run without filters" timestamp="2023-01-05T22:11:18" tests="7" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="2.2860" failures="0">
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run without filters JS project files" time="0.0430" classname="JS project files">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run without filters TS project files" time="0.0280" classname="TS project files">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run without filters App project files" time="2.1310" classname="App project files">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run without filters All targets match" time="0.0280" classname="All targets match">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run without filters Single target file does not match" time="0.0100" classname="Single target file does not match">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run without filters Warns correctly if eslint and eslint-lwc have one duplicate path to process" time="0.0100" classname="Warns correctly if eslint and eslint-lwc have one duplicate path to process">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run without filters Warns correctly if eslint and eslint-lwc have one duplicate path to process" time="0.0150" classname="Warns correctly if eslint and eslint-lwc have one duplicate path to process">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Run by category" timestamp="2023-01-05T22:11:20" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="3.8120" failures="0">
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run by category Filtering by one category runs only rules in that category" time="1.8020" classname="Filtering by one category runs only rules in that category">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run by category Filtering by multiple categories runs any rule in either category" time="2.0070" classname="Filtering by multiple categories runs any rule in either category">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Run by engine" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0600" failures="0">
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Test Case: Run by engine Filtering by engine works as expected" time="0.0580" classname="Filtering by engine works as expected">
    </testcase>
  </testsuite>
  <testsuite name="Edge Cases" timestamp="2023-01-05T22:11:24" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0940" failures="0">
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Edge Cases When no rules match the given criteria, an empty string is returned" time="0.0220" classname="When no rules match the given criteria, an empty string is returned">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Edge Cases Single target file does not match" time="0.0120" classname="Single target file does not match">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Edge Cases Single target directory does not match" time="0.0120" classname="Single target directory does not match">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Edge Cases Multiple targets do not match" time="0.0120" classname="Multiple targets do not match">
    </testcase>
    <testcase name="RuleManager runRulesMatchingCriteria() Test Case: Run against test projects Edge Cases Some targets do not match" time="0.0320" classname="Some targets do not match">
    </testcase>
  </testsuite>
  <testsuite name="unpackTargets()" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Positive matching" timestamp="2023-01-05T22:11:24" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0080" failures="0">
    <testcase name="RuleManager unpackTargets() Positive matching File-type targets are properly matched" time="0.0010" classname="File-type targets are properly matched">
    </testcase>
    <testcase name="RuleManager unpackTargets() Positive matching Directory-type targets are properly matched" time="0.0010" classname="Directory-type targets are properly matched">
    </testcase>
    <testcase name="RuleManager unpackTargets() Positive matching Positive method-level targets are properly matched" time="0.0000" classname="Positive method-level targets are properly matched">
    </testcase>
    <testcase name="RuleManager unpackTargets() Positive matching Positive glob-type targets are properly matched" time="0.0020" classname="Positive glob-type targets are properly matched">
    </testcase>
  </testsuite>
  <testsuite name="Negative matching" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/RuleManager.test.ts" time="0.0070" failures="0">
    <testcase name="RuleManager unpackTargets() Negative matching Negative globs properly interact with file targets" time="0.0000" classname="Negative globs properly interact with file targets">
    </testcase>
    <testcase name="RuleManager unpackTargets() Negative matching Negative globs properly interact with directory targets" time="0.0010" classname="Negative globs properly interact with directory targets">
    </testcase>
    <testcase name="RuleManager unpackTargets() Negative matching Negative globs properly interact with positive glob targets" time="0.0020" classname="Negative globs properly interact with positive glob targets">
    </testcase>
  </testsuite>
  <testsuite name="LocalCatalog" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getRulesMatchingFilters" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="CategoryFilter" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Positive" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0050" failures="0">
    <testcase name="LocalCatalog getRulesMatchingFilters CategoryFilter Positive Single Value" time="0.0010" classname="Single Value">
    </testcase>
    <testcase name="LocalCatalog getRulesMatchingFilters CategoryFilter Positive Multiple Values" time="0.0000" classname="Multiple Values">
    </testcase>
  </testsuite>
  <testsuite name="Negative" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0030" failures="0">
    <testcase name="LocalCatalog getRulesMatchingFilters CategoryFilter Negative Single Value" time="0.0010" classname="Single Value">
    </testcase>
    <testcase name="LocalCatalog getRulesMatchingFilters CategoryFilter Negative Multiple Values" time="0.0000" classname="Multiple Values">
    </testcase>
  </testsuite>
  <testsuite name="Multiple Heterogenous Filters" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Positive" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Rules must match a parameter from each filter when multiple filters are specified" timestamp="2023-01-05T22:11:24" tests="5" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0150" failures="0">
    <testcase name="LocalCatalog getRulesMatchingFilters Multiple Heterogenous Filters Positive Rules must match a parameter from each filter when multiple filters are specified Two Filters - Single Parameter" time="0.0000" classname="Two Filters - Single Parameter">
    </testcase>
    <testcase name="LocalCatalog getRulesMatchingFilters Multiple Heterogenous Filters Positive Rules must match a parameter from each filter when multiple filters are specified Two Filters - Single/Multiple Parameters" time="0.0000" classname="Two Filters - Single/Multiple Parameters">
    </testcase>
    <testcase name="LocalCatalog getRulesMatchingFilters Multiple Heterogenous Filters Positive Rules must match a parameter from each filter when multiple filters are specified Two Filters - Multiple/Multiple Parameters" time="0.0010" classname="Two Filters - Multiple/Multiple Parameters">
    </testcase>
    <testcase name="LocalCatalog getRulesMatchingFilters Multiple Heterogenous Filters Positive Rules must match a parameter from each filter when multiple filters are specified Three Filters - Multiple/Multiple/Single Parameters" time="0.0000" classname="Three Filters - Multiple/Multiple/Single Parameters">
    </testcase>
    <testcase name="LocalCatalog getRulesMatchingFilters Multiple Heterogenous Filters Positive Rules must match a parameter from each filter when multiple filters are specified Three Filters - Multiple/Multiple/Single Parameters" time="0.0000" classname="Three Filters - Multiple/Multiple/Single Parameters">
    </testcase>
  </testsuite>
  <testsuite name="Mixed Positive and Negative" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/LocalCatalog.test.ts" time="0.0020" failures="0">
    <testcase name="LocalCatalog getRulesMatchingFilters Mixed Positive and Negative Multiple Positive and Negative Values" time="0.0000" classname="Multiple Positive and Negative Values">
    </testcase>
  </testsuite>
  <testsuite name="normalizeSeverity" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="test PmdEngine" timestamp="2023-01-05T22:11:24" tests="6" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0060" failures="0">
    <testcase name="normalizeSeverity test PmdEngine test severity value 1" time="0.0000" classname="test severity value 1">
    </testcase>
    <testcase name="normalizeSeverity test PmdEngine test severity value 2" time="0.0000" classname="test severity value 2">
    </testcase>
    <testcase name="normalizeSeverity test PmdEngine test severity value 3" time="0.0000" classname="test severity value 3">
    </testcase>
    <testcase name="normalizeSeverity test PmdEngine test severity value 4" time="0.0000" classname="test severity value 4">
    </testcase>
    <testcase name="normalizeSeverity test PmdEngine test severity value 5" time="0.0000" classname="test severity value 5">
    </testcase>
    <testcase name="normalizeSeverity test PmdEngine test invalid severity value 100" time="0.0000" classname="test invalid severity value 100">
    </testcase>
  </testsuite>
  <testsuite name="test CustomPmdEngine" timestamp="2023-01-05T22:11:24" tests="6" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0070" failures="0">
    <testcase name="normalizeSeverity test CustomPmdEngine test severity value 1" time="0.0000" classname="test severity value 1">
    </testcase>
    <testcase name="normalizeSeverity test CustomPmdEngine test severity value 2" time="0.0000" classname="test severity value 2">
    </testcase>
    <testcase name="normalizeSeverity test CustomPmdEngine test severity value 3" time="0.0000" classname="test severity value 3">
    </testcase>
    <testcase name="normalizeSeverity test CustomPmdEngine test severity value 4" time="0.0000" classname="test severity value 4">
    </testcase>
    <testcase name="normalizeSeverity test CustomPmdEngine test severity value 5" time="0.0000" classname="test severity value 5">
    </testcase>
    <testcase name="normalizeSeverity test CustomPmdEngine test invalid severity value 100" time="0.0000" classname="test invalid severity value 100">
    </testcase>
  </testsuite>
  <testsuite name="test CustomEslintEngine" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0030" failures="0">
    <testcase name="normalizeSeverity test CustomEslintEngine test severity value 1" time="0.0000" classname="test severity value 1">
    </testcase>
    <testcase name="normalizeSeverity test CustomEslintEngine test severity value 2" time="0.0000" classname="test severity value 2">
    </testcase>
    <testcase name="normalizeSeverity test CustomEslintEngine test invalid severity value 100" time="0.0000" classname="test invalid severity value 100">
    </testcase>
  </testsuite>
  <testsuite name="test JavascriptEslintEngine" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0020" failures="0">
    <testcase name="normalizeSeverity test JavascriptEslintEngine test severity value 1" time="0.0000" classname="test severity value 1">
    </testcase>
    <testcase name="normalizeSeverity test JavascriptEslintEngine test severity value 2" time="0.0000" classname="test severity value 2">
    </testcase>
    <testcase name="normalizeSeverity test JavascriptEslintEngine test invalid severity value 100" time="0.0000" classname="test invalid severity value 100">
    </testcase>
  </testsuite>
  <testsuite name="test LWCEslintEngine" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0020" failures="0">
    <testcase name="normalizeSeverity test LWCEslintEngine test severity value 1" time="0.0000" classname="test severity value 1">
    </testcase>
    <testcase name="normalizeSeverity test LWCEslintEngine test severity value 2" time="0.0000" classname="test severity value 2">
    </testcase>
    <testcase name="normalizeSeverity test LWCEslintEngine test invalid severity value 100" time="0.0000" classname="test invalid severity value 100">
    </testcase>
  </testsuite>
  <testsuite name="test TypescriptEslintEngine" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0030" failures="0">
    <testcase name="normalizeSeverity test TypescriptEslintEngine test severity value 1" time="0.0000" classname="test severity value 1">
    </testcase>
    <testcase name="normalizeSeverity test TypescriptEslintEngine test severity value 2" time="0.0000" classname="test severity value 2">
    </testcase>
    <testcase name="normalizeSeverity test TypescriptEslintEngine test invalid severity value 100" time="0.0000" classname="test invalid severity value 100">
    </testcase>
  </testsuite>
  <testsuite name="test RetireJsEngine" timestamp="2023-01-05T22:11:24" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/services/RuleEngine.severity.test.ts" time="0.0050" failures="0">
    <testcase name="normalizeSeverity test RetireJsEngine test severity value 1" time="0.0000" classname="test severity value 1">
    </testcase>
    <testcase name="normalizeSeverity test RetireJsEngine test severity value 2" time="0.0000" classname="test severity value 2">
    </testcase>
    <testcase name="normalizeSeverity test RetireJsEngine test severity value 3" time="0.0000" classname="test severity value 3">
    </testcase>
    <testcase name="normalizeSeverity test RetireJsEngine test invalid severity value 100" time="0.0010" classname="test invalid severity value 100">
    </testcase>
  </testsuite>
  <testsuite name="SfgeDfaEngine" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/sfge/SfgeDfaEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#processStdout()" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/sfge/SfgeDfaEngine.test.ts" time="0.0020" failures="0">
    <testcase name="SfgeDfaEngine #processStdout() When GraphEngine finds violations, they are converted into RuleResult objects" time="0.0010" classname="When GraphEngine finds violations, they are converted into RuleResult objects">
    </testcase>
    <testcase name="SfgeDfaEngine #processStdout() When GraphEngine finds no violations, results are empty" time="0.0000" classname="When GraphEngine finds no violations, results are empty">
    </testcase>
  </testsuite>
  <testsuite name="SfgePathlessEngine" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/sfge/SfgePathlessEngine.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#isEngineRequested()" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/sfge/SfgePathlessEngine.test.ts" time="0.0020" failures="0">
    <testcase name="SfgePathlessEngine #isEngineRequested() Pathless SFGE counts as requested when explicitly requested" time="0.0000" classname="Pathless SFGE counts as requested when explicitly requested">
    </testcase>
    <testcase name="SfgePathlessEngine #isEngineRequested() Pathless SFGE does not count as requested-by-default" time="0.0000" classname="Pathless SFGE does not count as requested-by-default">
    </testcase>
    <testcase name="SfgePathlessEngine #isEngineRequested() Pathless SFGE does not count as requested when explicitly not requested" time="0.0000" classname="Pathless SFGE does not count as requested when explicitly not requested">
    </testcase>
  </testsuite>
  <testsuite name="#shouldEngineRun()" timestamp="2023-01-05T22:11:24" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/sfge/SfgePathlessEngine.test.ts" time="0.0040" failures="0">
    <testcase name="SfgePathlessEngine #shouldEngineRun() Returns true when SfgeConfig has non-empty projectdirs array" time="0.0000" classname="Returns true when SfgeConfig has non-empty projectdirs array">
    </testcase>
    <testcase name="SfgePathlessEngine #shouldEngineRun() Throws error when SfgeConfig has empty projectdirs array" time="0.0000" classname="Throws error when SfgeConfig has empty projectdirs array">
    </testcase>
    <testcase name="SfgePathlessEngine #shouldEngineRun() Throws error when SfgeConfig lacks projectdirs array" time="0.0000" classname="Throws error when SfgeConfig lacks projectdirs array">
    </testcase>
    <testcase name="SfgePathlessEngine #shouldEngineRun() Throws error when SfgeConfig is outright absent" time="0.0000" classname="Throws error when SfgeConfig is outright absent">
    </testcase>
  </testsuite>
  <testsuite name="Tests for CommonEngineUtils" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/CommonEngineUtils.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#isValueInFilter" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/CommonEngineUtils.test.ts" time="0.0020" failures="0">
    <testcase name="Tests for CommonEngineUtils #isValueInFilter should detect if value is present in filter values" time="0.0000" classname="should detect if value is present in filter values">
    </testcase>
    <testcase name="Tests for CommonEngineUtils #isValueInFilter should detect if value is not present in filter values" time="0.0000" classname="should detect if value is not present in filter values">
    </testcase>
  </testsuite>
  <testsuite name="#anyFilterValueStartsWith" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/CommonEngineUtils.test.ts" time="0.0010" failures="0">
    <testcase name="Tests for CommonEngineUtils #anyFilterValueStartsWith should detect if filter values starts with a given string" time="0.0000" classname="should detect if filter values starts with a given string">
    </testcase>
    <testcase name="Tests for CommonEngineUtils #anyFilterValueStartsWith should detect if none of the filter values start with a given string" time="0.0000" classname="should detect if none of the filter values start with a given string">
    </testcase>
  </testsuite>
  <testsuite name="#isFilterEmptyOrNameInFilter" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/CommonEngineUtils.test.ts" time="0.0020" failures="0">
    <testcase name="Tests for CommonEngineUtils #isFilterEmptyOrNameInFilter should always return true if filter values list is empty" time="0.0000" classname="should always return true if filter values list is empty">
    </testcase>
    <testcase name="Tests for CommonEngineUtils #isFilterEmptyOrNameInFilter should check if value is present in the list if list is non empty" time="0.0000" classname="should check if value is present in the list if list is non empty">
    </testcase>
  </testsuite>
  <testsuite name="#isFilterEmptyOrFilterValueStartsWith" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/CommonEngineUtils.test.ts" time="0.0030" failures="0">
    <testcase name="Tests for CommonEngineUtils #isFilterEmptyOrFilterValueStartsWith should always return true if filter values list is empty" time="0.0000" classname="should always return true if filter values list is empty">
    </testcase>
    <testcase name="Tests for CommonEngineUtils #isFilterEmptyOrFilterValueStartsWith should check if any of the filter values start with given string in the list if list is non empty" time="0.0000" classname="should check if any of the filter values start with given string in the list if list is non empty">
    </testcase>
  </testsuite>
  <testsuite name="#isCustomRun" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/CommonEngineUtils.test.ts" time="0.0010" failures="0">
    <testcase name="Tests for CommonEngineUtils #isCustomRun should return true of value exists in map" time="0.0000" classname="should return true of value exists in map">
    </testcase>
    <testcase name="Tests for CommonEngineUtils #isCustomRun should return true of value exists in map" time="0.0000" classname="should return true of value exists in map">
    </testcase>
  </testsuite>
  <testsuite name="Config.ts" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/Config.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Methods" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/Config.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#init()" timestamp="2023-01-05T22:11:24" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/Config.test.ts" time="0.0060" failures="0">
    <testcase name="Config.ts Methods #init() When neither GA nor pilot configs exist, only the GA config is created" time="0.0010" classname="When neither GA nor pilot configs exist, only the GA config is created">
    </testcase>
    <testcase name="Config.ts Methods #init() When only GA config exists, no pilot file is created" time="0.0010" classname="When only GA config exists, no pilot file is created">
    </testcase>
    <testcase name="Config.ts Methods #init() When only pilot config exists, GA config file is copied from that" time="0.0010" classname="When only pilot config exists, GA config file is copied from that">
    </testcase>
    <testcase name="Config.ts Methods #init() Initializes using existing config file if available" time="0.0010" classname="Initializes using existing config file if available">
    </testcase>
  </testsuite>
  <testsuite name="#upgradeConfig()" timestamp="2023-01-05T22:11:24" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/Config.test.ts" time="0.0050" failures="0">
    <testcase name="Config.ts Methods #upgradeConfig() When upgrade is unnecessary, no upgrade is attempted" time="0.0000" classname="When upgrade is unnecessary, no upgrade is attempted">
    </testcase>
    <testcase name="Config.ts Methods #upgradeConfig() Successful upgrades are persisted" time="0.0000" classname="Successful upgrades are persisted">
    </testcase>
    <testcase name="Config.ts Methods #upgradeConfig() Persists partial upgrades" time="0.0000" classname="Persists partial upgrades">
    </testcase>
    <testcase name="Config.ts Methods #upgradeConfig() Total failures are not persisted" time="0.0010" classname="Total failures are not persisted">
    </testcase>
  </testsuite>
  <testsuite name="#isEngineEnabled()" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/Config.test.ts" time="0.0010" failures="0">
    <testcase name="Config.ts Methods #isEngineEnabled() Expected engines are default-enabled" time="0.0000" classname="Expected engines are default-enabled">
    </testcase>
  </testsuite>
  <testsuite name="Behaviors" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/Config.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Fetching of config values" timestamp="2023-01-05T22:11:24" tests="4" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/Config.test.ts" time="0.0070" failures="0">
    <testcase name="Config.ts Behaviors Fetching of config values If config value is available, it should be returned" time="0.0010" classname="If config value is available, it should be returned">
    </testcase>
    <testcase name="Config.ts Behaviors Fetching of config values If config value is undefined, it should be replaced with the default value" time="0.0010" classname="If config value is undefined, it should be replaced with the default value">
    </testcase>
    <testcase name="Config.ts Behaviors Fetching of config values If config contains value of wrong type, an error should be thrown" time="0.0010" classname="If config contains value of wrong type, an error should be thrown">
    </testcase>
    <testcase name="Config.ts Behaviors Fetching of config values If a whole engine is missing from config, it is replaced with default value" time="0.0000" classname="If a whole engine is missing from config, it is replaced with default value">
    </testcase>
  </testsuite>
  <testsuite name="PathMatcher" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#filterPathsByPatterns()" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Positive patterns only" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0130" failures="2">
    <testcase name="PathMatcher #filterPathsByPatterns() Positive patterns only INCLUDES paths matching ANY positive pattern" time="0.0010" classname="INCLUDES paths matching ANY positive pattern">
      <failure message="Paths that match a single positive pattern should be included: expected [ …(2) ] to not include &apos;path/to/some/javascriptfile.js&apos;" type="AssertionError"><![CDATA[AssertionError: Paths that match a single positive pattern should be included: expected [ …(2) ] to not include 'path/to/some/javascriptfile.js'
    at Context.<anonymous> (test/lib/util/PathMatcher.test.ts:18:28)]]></failure>
    </testcase>
    <testcase name="PathMatcher #filterPathsByPatterns() Positive patterns only EXCLUDES paths matching NO positive patterns" time="0.0000" classname="EXCLUDES paths matching NO positive patterns">
      <failure message="Paths that match no positive patterns should be excluded: expected [ …(2) ] to include &apos;path/to/some/javafile.java&apos;" type="AssertionError"><![CDATA[AssertionError: Paths that match no positive patterns should be excluded: expected [ …(2) ] to include 'path/to/some/javafile.java'
    at Context.<anonymous> (test/lib/util/PathMatcher.test.ts:24:24)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="Complex Patterns only" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0020" failures="0">
    <testcase name="PathMatcher #filterPathsByPatterns() Complex Patterns only INCLUDES paths matching ANY complex pattern" time="0.0000" classname="INCLUDES paths matching ANY complex pattern">
    </testcase>
    <testcase name="PathMatcher #filterPathsByPatterns() Complex Patterns only EXCLUDES paths matching NO complex pattern" time="0.0000" classname="EXCLUDES paths matching NO complex pattern">
    </testcase>
  </testsuite>
  <testsuite name="Negative patterns only" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0060" failures="1">
    <testcase name="PathMatcher #filterPathsByPatterns() Negative patterns only INCLUDES paths matching EVERY negative pattern" time="0.0000" classname="INCLUDES paths matching EVERY negative pattern">
      <failure message="Paths that match all negative patterns should be included: expected [ …(2) ] to not include &apos;path/to/some/javascriptfile.js&apos;" type="AssertionError"><![CDATA[AssertionError: Paths that match all negative patterns should be included: expected [ …(2) ] to not include 'path/to/some/javascriptfile.js'
    at Context.<anonymous> (test/lib/util/PathMatcher.test.ts:81:28)]]></failure>
    </testcase>
    <testcase name="PathMatcher #filterPathsByPatterns() Negative patterns only EXCLUDES paths matching NOT EVERY negative pattern" time="0.0000" classname="EXCLUDES paths matching NOT EVERY negative pattern">
    </testcase>
  </testsuite>
  <testsuite name="Mixed patterns" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0020" failures="0">
    <testcase name="PathMatcher #filterPathsByPatterns() Mixed patterns INCLUDES paths matching ANY positive or complex AND ALL negative patterns" time="0.0000" classname="INCLUDES paths matching ANY positive or complex AND ALL negative patterns">
    </testcase>
    <testcase name="PathMatcher #filterPathsByPatterns() Mixed patterns EXCLUDES paths matching ANY positive or complex patterns but NOT ALL negative patterns" time="0.0010" classname="EXCLUDES paths matching ANY positive or complex patterns but NOT ALL negative patterns">
    </testcase>
    <testcase name="PathMatcher #filterPathsByPatterns() Mixed patterns EXCLUDES paths matching ALL negative patterns but NO positive or complex patterns" time="0.0000" classname="EXCLUDES paths matching ALL negative patterns but NO positive or complex patterns">
    </testcase>
  </testsuite>
  <testsuite name="De-normalized paths" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0030" failures="0">
    <testcase name="PathMatcher #filterPathsByPatterns() De-normalized paths INCLUDES paths matching ANY positive AND ALL negative patterns" time="0.0000" classname="INCLUDES paths matching ANY positive AND ALL negative patterns">
    </testcase>
    <testcase name="PathMatcher #filterPathsByPatterns() De-normalized paths EXCLUDES paths matching ANY positive patterns but NOT ALL negative patterns" time="0.0000" classname="EXCLUDES paths matching ANY positive patterns but NOT ALL negative patterns">
    </testcase>
    <testcase name="PathMatcher #filterPathsByPatterns() De-normalized paths EXCLUDES paths matching ALL negative patterns but NO positive patterns" time="0.0000" classname="EXCLUDES paths matching ALL negative patterns but NO positive patterns">
    </testcase>
  </testsuite>
  <testsuite name="#pathMatchesPatterns()" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Positive patterns only" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0030" failures="0">
    <testcase name="PathMatcher #pathMatchesPatterns() Positive patterns only MATCHES paths matching ANY positive pattern" time="0.0000" classname="MATCHES paths matching ANY positive pattern">
    </testcase>
    <testcase name="PathMatcher #pathMatchesPatterns() Positive patterns only DOES NOT MATCH paths matching NO positive patterns" time="0.0000" classname="DOES NOT MATCH paths matching NO positive patterns">
    </testcase>
  </testsuite>
  <testsuite name="Negative patterns only" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0010" failures="0">
    <testcase name="PathMatcher #pathMatchesPatterns() Negative patterns only MATCHES paths matching EVERY negative pattern" time="0.0000" classname="MATCHES paths matching EVERY negative pattern">
    </testcase>
    <testcase name="PathMatcher #pathMatchesPatterns() Negative patterns only DOES NOT MATCH paths matching NOT EVERY negative pattern" time="0.0000" classname="DOES NOT MATCH paths matching NOT EVERY negative pattern">
    </testcase>
  </testsuite>
  <testsuite name="Mixed patterns" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0030" failures="0">
    <testcase name="PathMatcher #pathMatchesPatterns() Mixed patterns MATCHES paths matching positive and negative patterns" time="0.0000" classname="MATCHES paths matching positive and negative patterns">
    </testcase>
    <testcase name="PathMatcher #pathMatchesPatterns() Mixed patterns DOES NOT MATCH paths matching positive patterns but not negative patterns" time="0.0000" classname="DOES NOT MATCH paths matching positive patterns but not negative patterns">
    </testcase>
    <testcase name="PathMatcher #pathMatchesPatterns() Mixed patterns DOES NOT MATCH paths matching negative patterns but not positive patterns" time="0.0000" classname="DOES NOT MATCH paths matching negative patterns but not positive patterns">
    </testcase>
  </testsuite>
  <testsuite name="De-normalized paths" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PathMatcher.test.ts" time="0.0020" failures="0">
    <testcase name="PathMatcher #pathMatchesPatterns() De-normalized paths MATCHES paths matching positive and negative patterns" time="0.0000" classname="MATCHES paths matching positive and negative patterns">
    </testcase>
    <testcase name="PathMatcher #pathMatchesPatterns() De-normalized paths DOES NOT MATCH paths matching positive patterns but not negative patterns" time="0.0000" classname="DOES NOT MATCH paths matching positive patterns but not negative patterns">
    </testcase>
    <testcase name="PathMatcher #pathMatchesPatterns() De-normalized paths DOES NOT MATCH paths matching negative patterns but not positive patterns" time="0.0000" classname="DOES NOT MATCH paths matching negative patterns but not positive patterns">
    </testcase>
  </testsuite>
  <testsuite name="PrettyPrinter tests" timestamp="2023-01-05T22:11:24" tests="7" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/PrettyPrinter.test.ts" time="0.0050" failures="0">
    <testcase name="PrettyPrinter tests should print Set&lt;string&gt;" time="0.0000" classname="should print Set&lt;string&gt;">
    </testcase>
    <testcase name="PrettyPrinter tests should print Map&lt;string, Set&lt;string&gt;&gt;" time="0.0000" classname="should print Map&lt;string, Set&lt;string&gt;&gt;">
    </testcase>
    <testcase name="PrettyPrinter tests should print Map&lt;string, Map&lt;string, Set&lt;string&gt;&gt;&gt;" time="0.0000" classname="should print Map&lt;string, Map&lt;string, Set&lt;string&gt;&gt;&gt;">
    </testcase>
    <testcase name="PrettyPrinter tests should print a RuleFilter" time="0.0000" classname="should print a RuleFilter">
    </testcase>
    <testcase name="PrettyPrinter tests should print RuleFilter array" time="0.0000" classname="should print RuleFilter array">
    </testcase>
    <testcase name="PrettyPrinter tests should print a Rule" time="0.0000" classname="should print a Rule">
    </testcase>
    <testcase name="PrettyPrinter tests should print a Rule array" time="0.0000" classname="should print a Rule array">
    </testcase>
  </testsuite>
  <testsuite name="RunOutputProcessor" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#processRunOutput()" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Writing to console" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0000" failures="0">
    <testcase name="RunOutputProcessor #processRunOutput() Writing to console Empty results yield expected message" time="0.0010" classname="Empty results yield expected message">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: Table" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0080" failures="0">
    <testcase name="RunOutputProcessor #processRunOutput() Writing to console Test Case: Table Table-type output should be followed by summary" time="0.0040" classname="Table-type output should be followed by summary">
    </testcase>
    <testcase name="RunOutputProcessor #processRunOutput() Writing to console Test Case: Table Throws severity-based exception on request" time="0.0010" classname="Throws severity-based exception on request">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: CSV" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0020" failures="0">
    <testcase name="RunOutputProcessor #processRunOutput() Writing to console Test Case: CSV CSV-type output should NOT be followed by summary" time="0.0000" classname="CSV-type output should NOT be followed by summary">
    </testcase>
    <testcase name="RunOutputProcessor #processRunOutput() Writing to console Test Case: CSV Throws severity-based exception on request" time="0.0000" classname="Throws severity-based exception on request">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: JSON" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0020" failures="0">
    <testcase name="RunOutputProcessor #processRunOutput() Writing to console Test Case: JSON JSON-type output should NOT be followed by summary" time="0.0000" classname="JSON-type output should NOT be followed by summary">
    </testcase>
    <testcase name="RunOutputProcessor #processRunOutput() Writing to console Test Case: JSON Throws severity-based exception on request" time="0.0000" classname="Throws severity-based exception on request">
    </testcase>
  </testsuite>
  <testsuite name="Writing to file" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0000" failures="0">
    <testcase name="RunOutputProcessor #processRunOutput() Writing to file Empty results yield expected message" time="0.0000" classname="Empty results yield expected message">
    </testcase>
  </testsuite>
  <testsuite name="Test Case: CSV" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/RunOutputProcessor.test.ts" time="0.0020" failures="0">
    <testcase name="RunOutputProcessor #processRunOutput() Writing to file Test Case: CSV Results are properly written to file" time="0.0000" classname="Results are properly written to file">
    </testcase>
    <testcase name="RunOutputProcessor #processRunOutput() Writing to file Test Case: CSV Throws severity-based exception on request" time="0.0000" classname="Throws severity-based exception on request">
    </testcase>
  </testsuite>
  <testsuite name="StaticResourceHandler" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/StaticResourceHandler.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="identifyStaticResourceType" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/StaticResourceHandler.test.ts" time="0.0080" failures="0">
    <testcase name="StaticResourceHandler identifyStaticResourceType Text-type static resources are properly identified" time="0.0010" classname="Text-type static resources are properly identified">
    </testcase>
    <testcase name="StaticResourceHandler identifyStaticResourceType ZIP-type resources are properly identified" time="0.0030" classname="ZIP-type resources are properly identified">
    </testcase>
    <testcase name="StaticResourceHandler identifyStaticResourceType Other types of resources are properly identified as OTHER" time="0.0010" classname="Other types of resources are properly identified as OTHER">
    </testcase>
  </testsuite>
  <testsuite name="VersionUpgradeManager" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Methods" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#getVersionsBetween()" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0020" failures="0">
    <testcase name="VersionUpgradeManager Methods #getVersionsBetween() fromVersion param is exclusive lower bound" time="0.0000" classname="fromVersion param is exclusive lower bound">
    </testcase>
    <testcase name="VersionUpgradeManager Methods #getVersionsBetween() toVersion param is inclusive upper bound" time="0.0000" classname="toVersion param is inclusive upper bound">
    </testcase>
    <testcase name="VersionUpgradeManager Methods #getVersionsBetween() Null fromVersion is treated as before everything" time="0.0000" classname="Null fromVersion is treated as before everything">
    </testcase>
  </testsuite>
  <testsuite name="#upgrade()" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0030" failures="0">
    <testcase name="VersionUpgradeManager Methods #upgrade() Only upgrade scripts in the target range are invoked" time="0.0000" classname="Only upgrade scripts in the target range are invoked">
    </testcase>
    <testcase name="VersionUpgradeManager Methods #upgrade() Fails safely and cleanly" time="0.0000" classname="Fails safely and cleanly">
    </testcase>
  </testsuite>
  <testsuite name="#upgradeToLatest" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0010" failures="0">
    <testcase name="VersionUpgradeManager Methods #upgradeToLatest All upgrades after the fromVersion are invoked" time="0.0000" classname="All upgrades after the fromVersion are invoked">
    </testcase>
  </testsuite>
  <testsuite name="Individual UpgradeScript tests" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="v2.7.0" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0010" failures="0">
    <testcase name="VersionUpgradeManager Individual UpgradeScript tests v2.7.0 RetireJS targetPatterns are removed" time="0.0000" classname="RetireJS targetPatterns are removed">
    </testcase>
  </testsuite>
  <testsuite name="v3.0.0" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0010" failures="0">
    <testcase name="VersionUpgradeManager Individual UpgradeScript tests v3.0.0 RetireJS is enabled by default" time="0.0000" classname="RetireJS is enabled by default">
    </testcase>
  </testsuite>
  <testsuite name="v3.6.0" timestamp="2023-01-05T22:11:24" tests="3" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0030" failures="0">
    <testcase name="VersionUpgradeManager Individual UpgradeScript tests v3.6.0 GA config is overwritten by more recent pilot config" time="0.0000" classname="GA config is overwritten by more recent pilot config">
    </testcase>
    <testcase name="VersionUpgradeManager Individual UpgradeScript tests v3.6.0 GA config is not overwritten by less recent pilot config" time="0.0000" classname="GA config is not overwritten by less recent pilot config">
    </testcase>
    <testcase name="VersionUpgradeManager Individual UpgradeScript tests v3.6.0 Non-existing pilot config causes no issues" time="0.0000" classname="Non-existing pilot config causes no issues">
    </testcase>
  </testsuite>
  <testsuite name="RulesetFilters" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0020" failures="0">
    <testcase name="RulesetFilters Correctly filters by one value" time="0.0000" classname="Correctly filters by one value">
    </testcase>
    <testcase name="RulesetFilters Correctly filters by multiple values" time="0.0000" classname="Correctly filters by multiple values">
    </testcase>
  </testsuite>
  <testsuite name="CategoryFilters" timestamp="2023-01-05T22:11:24" tests="0" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Positive filters" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0020" failures="0">
    <testcase name="CategoryFilters Positive filters Correctly filters by one value" time="0.0000" classname="Correctly filters by one value">
    </testcase>
    <testcase name="CategoryFilters Positive filters Correctly filters by multiple values" time="0.0000" classname="Correctly filters by multiple values">
    </testcase>
  </testsuite>
  <testsuite name="Negative criteria" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0020" failures="0">
    <testcase name="CategoryFilters Negative criteria Correctly filters by one value" time="0.0000" classname="Correctly filters by one value">
    </testcase>
    <testcase name="CategoryFilters Negative criteria Correctly filters by multiple values" time="0.0000" classname="Correctly filters by multiple values">
    </testcase>
  </testsuite>
  <testsuite name="Inapplicable Filters" timestamp="2023-01-05T22:11:24" tests="1" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0010" failures="0">
    <testcase name="Inapplicable Filters Inapplicable filters are ignored" time="0.0000" classname="Inapplicable filters are ignored">
    </testcase>
  </testsuite>
  <testsuite name="Edge Cases" timestamp="2023-01-05T22:11:24" tests="2" file="/Users/jfeingold/Code/sfdx-scanner/test/lib/util/VersionUpgradeManager.test.ts" time="0.0040" failures="0">
    <testcase name="Edge Cases Returns all categories for eligible engines when given no filters" time="0.0000" classname="Returns all categories for eligible engines when given no filters">
    </testcase>
    <testcase name="Edge Cases Returns all categories when given only inapplicable filters" time="0.0010" classname="Returns all categories when given only inapplicable filters">
    </testcase>
  </testsuite>
</testsuites>