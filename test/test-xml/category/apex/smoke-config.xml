<?xml version="1.0"?>

<ruleset name="SmokeConfig"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        Custom config for use in smoke test script. See ./smoke-tests/SmokeTestGenerator.js
    </description>
<!-- This is just a copy-paste of the declaration of PMD's own ClassNamingConventions rule. -->
    <rule name="fakeNamingConvention"
          language="apex"
          message="The {0} name ''{1}'' doesn''t match ''{2}''"
          class="net.sourceforge.pmd.lang.apex.rule.codestyle.ClassNamingConventionsRule"
          externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_apex_codestyle.html#classnamingconventions">
        <description>
            Configurable naming conventions for type declarations. This rule reports
            type declarations which do not match the regex that applies to their
            specific kind (e.g., enum or interface). Each regex can be configured through
            properties.

            By default this rule uses the standard Apex naming convention (Pascal case).
        </description>
        <priority>1</priority>
        <example>
<![CDATA[
public class FooClass { } // This is in pascal case, so it's ok

public class fooClass { } // THis will be reported unless you change the regex
]]>
        </example>
    </rule>
<!-- This is just a copy-paste of the declaration of PMD's own ApexDoc rule. -->
    <rule name="fakeApexDoc"
          language="apex"
          message="ApexDoc comment is missing or incorrect"
          class="net.sourceforge.pmd.lang.apex.rule.documentation.ApexDocRule"
          externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_apex_documentation.html#apexdoc">
        <description>
This rule validates that:

*   ApexDoc comments are present for classes, methods, and properties that are public or global, excluding
overrides and test classes (as well as the contents of test classes).
*   ApexDoc comments are present for classes, methods, and properties that are protected or private, depending
on the properties `reportPrivate` and `reportProtected`.
*   ApexDoc comments should contain @description depending on the property `reportMissingDescription`.
*   ApexDoc comments on non-void, non-constructor methods should contain @return.
*   ApexDoc comments on void or constructor methods should not contain @return.
*   ApexDoc comments on methods with parameters should contain @param for each parameter, in the same
order as the method signature.
*   ApexDoc comments are present on properties is only validated, if the property `reportProperty` is enabled.
By setting `reportProperty` to false, you can ignore missing comments on properties.

Method overrides and tests are both exempted from having ApexDoc.
        </description>
        <priority>3</priority>
        <example>
<![CDATA[
/**
 * @description Hello World
 */
public class HelloWorld {
    /**
     * @description Bar
     * @return Bar
     */
    public Object bar() { return null; }
}
]]>
        </example>
    </rule>

</ruleset>
