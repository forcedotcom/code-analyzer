{
  "rulesets": {
    "Empty Code": [
      "rulesets\/apex\/empty.xml"
    ],
    "quickstart": [
      "rulesets\/apex\/quickstart.xml"
    ],
    "Basic Ecmascript": [
      "rulesets\/ecmascript\/basic.xml"
    ],
    "ApexUnit": [
      "rulesets\/apex\/apexunit.xml"
    ],
    "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex": [
      "rulesets\/apex\/ruleset.xml"
    ],
    "Metrics temporary ruleset": [
      "rulesets\/apex\/metrics.xml"
    ],
    "Security": [
      "rulesets\/apex\/security.xml"
    ],
    "Complexity": [
      "rulesets\/apex\/complexity.xml"
    ],
    "Braces": [
      "rulesets\/ecmascript\/braces.xml",
      "rulesets\/apex\/braces.xml"
    ],
    "Style": [
      "rulesets\/apex\/style.xml"
    ],
    "Controversial Ecmascript": [
      "rulesets\/ecmascript\/controversial.xml"
    ],
    "Performance": [
      "rulesets\/apex\/performance.xml"
    ],
    "Unnecessary": [
      "rulesets\/ecmascript\/unnecessary.xml"
    ]
  },
  "rules": [
    {
      "rulesets": [
        "Controversial Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "AvoidWithStatement",
      "description": "Avoid using with - it's bad news",
      "categories": [
        "Best Practices"
      ],
      "message": "Avoid using with - it's bad news"
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "ConsistentReturn",
      "description": "\nECMAScript does provide for return types on functions, and therefore there is no solid rule as to their usage.\nHowever, when a function does use returns they should all have a value, or all with no value.  Mixed return\nusage is likely a bug, or at best poor style.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "A function should not mix 'return' statements with and without a result."
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "GlobalVariable",
      "description": "\nThis rule helps to avoid using accidently global variables by simply missing the \"var\" declaration.\nGlobal variables can lead to side-effects that are hard to debug.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Avoid using global variables"
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "ScopeForInVariable",
      "description": "\nA for-in loop in which the variable name is not explicitly scoped to the enclosing scope with the 'var' keyword can\nrefer to a variable in an enclosing scope outside the nearest enclosing scope.  This will overwrite the\nexisting value of the variable in the outer scope when the body of the for-in is evaluated.  When the for-in loop\nhas finished, the variable will contain the last value used in the for-in, and the original value from before\nthe for-in loop will be gone.  Since the for-in variable name is most likely intended to be a temporary name, it\nis better to explicitly scope the variable name to the nearest enclosing scope with 'var'.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "The for-in loop variable ''{0}'' should be explicitly scoped with 'var' to avoid pollution."
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "UseBaseWithParseInt",
      "description": "\nThis rule checks for usages of parseInt. While the second parameter is optional and usually defaults\nto 10 (base\/radix is 10 for a decimal number), different implementations may behave differently.\nIt also improves readability, if the base is given.\n\nSee also: [parseInt()](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/parseInt)\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Always provide a base when using parseInt() functions"
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "AvoidTrailingComma",
      "description": "\nThis rule helps improve code portability due to differences in browser treatment of trailing commas in object or array literals.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Avoid trailing commas in object or array literals"
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "EqualComparison",
      "description": "\nUsing == in condition may lead to unexpected results, as the variables are automatically casted to be of the\nsame type. The === operator avoids the casting.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Use '==='\/'!==' to compare with true\/false or Numbers"
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "InnaccurateNumericLiteral",
      "description": "\nThe numeric literal will have a different value at runtime, which can happen if you provide too much\nprecision in a floating point number.  This may result in numeric calculations being in error.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "The numeric literal ''{0}'' will have at different value at runtime."
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "AssignmentInOperand",
      "description": "\nAvoid assignments in operands; this can make code more complicated and harder to read.  This is sometime\nindicative of the bug where the assignment operator '=' was used instead of the equality operator '=='.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid assignments in operands"
    },
    {
      "rulesets": [
        "Braces"
      ],
      "languages": [
        "javascript"
      ],
      "name": "ForLoopsMustUseBraces",
      "description": "\nAvoid using 'for' statements without using curly braces.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using 'for' statements without curly braces"
    },
    {
      "rulesets": [
        "Braces"
      ],
      "languages": [
        "javascript"
      ],
      "name": "IfElseStmtsMustUseBraces",
      "description": "\nAvoid using if..else statements without using curly braces.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using 'if...else' statements without curly braces"
    },
    {
      "rulesets": [
        "Braces"
      ],
      "languages": [
        "javascript"
      ],
      "name": "IfStmtsMustUseBraces",
      "description": "\nAvoid using if statements without using curly braces.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using if statements without curly braces"
    },
    {
      "rulesets": [
        "Unnecessary"
      ],
      "languages": [
        "javascript"
      ],
      "name": "NoElseReturn",
      "description": "\nThe else block in a if-else-construct is unnecessary if the `if` block contains a return.\nThen the content of the else block can be put outside.\n\nSee also: <http:\/\/eslint.org\/docs\/rules\/no-else-return>\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "The else block is unnecessary"
    },
    {
      "rulesets": [
        "Unnecessary"
      ],
      "languages": [
        "javascript"
      ],
      "name": "UnnecessaryBlock",
      "description": "\nAn unnecessary Block is present.  Such Blocks are often used in other languages to\nintroduce a new variable scope.  Blocks do not behave like this in ECMAScipt, and using them can\nbe misleading.  Considering removing this unnecessary Block.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Unnecessary block."
    },
    {
      "rulesets": [
        "Unnecessary"
      ],
      "languages": [
        "javascript"
      ],
      "name": "UnnecessaryParentheses",
      "description": "Unnecessary parentheses should be removed.",
      "categories": [
        "Code Style"
      ],
      "message": "Unnecessary parentheses."
    },
    {
      "rulesets": [
        "Basic Ecmascript"
      ],
      "languages": [
        "javascript"
      ],
      "name": "UnreachableCode",
      "description": "\nA 'return', 'break', 'continue', or 'throw' statement should be the last in a block. Statements after these\nwill never execute.  This is a bug, or extremely poor style.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "A ''return'', ''break'', ''continue'', or ''throw'' statement should be the last in a block."
    },
    {
      "rulesets": [
        "Braces"
      ],
      "languages": [
        "javascript"
      ],
      "name": "WhileLoopsMustUseBraces",
      "description": "\nAvoid using 'while' statements without using curly braces.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using 'while' statements without curly braces"
    },
    {
      "rulesets": [],
      "languages": [
        "apex"
      ],
      "name": "ApexAssertionsShouldIncludeMessage",
      "description": "\nThe second parameter of System.assert\/third parameter of System.assertEquals\/System.assertNotEquals is a message.\nHaving a second\/third parameter provides more information and makes it easier to debug the test failure and\nimproves the readability of test output.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Apex test assert statement should make use of the message parameter."
    },
    {
      "rulesets": [
        "ApexUnit",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexUnitTestClassShouldHaveAsserts",
      "description": "\nApex unit tests should include at least one assertion.  This makes the tests more robust, and using assert\nwith messages provide the developer a clearer idea of what the test does.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Apex unit tests should System.assert() or assertEquals() or assertNotEquals()"
    },
    {
      "rulesets": [],
      "languages": [
        "apex"
      ],
      "name": "ApexUnitTestMethodShouldHaveIsTestAnnotation",
      "description": "\nApex test methods should have @isTest annotation.\nAs testMethod keyword is deprecated, Salesforce advices to use @isTest annotation for test class\/methods.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Apex test methods should have @isTest annotation."
    },
    {
      "rulesets": [
        "ApexUnit",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexUnitTestShouldNotUseSeeAllDataTrue",
      "description": "\nApex unit tests should not use @isTest(seeAllData=true) because it opens up the existing database data for unexpected modification by tests.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Apex unit tests should not use @isTest(seeAllData = true)"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidGlobalModifier",
      "description": "\nGlobal classes should be avoided (especially in managed packages) as they can never be deleted or changed in signature. Always check twice if something needs to be global.\nMany interfaces (e.g. Batch) required global modifiers in the past but don't require this anymore. Don't lock yourself in.\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Avoid using global modifier"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidLogicInTrigger",
      "description": "\nAs triggers do not allow methods like regular classes they are less flexible and suited to apply good encapsulation style.\nTherefore delegate the triggers work to a regular class (often called Trigger handler class).\n\nSee more here: <https:\/\/developer.salesforce.com\/page\/Trigger_Frameworks_and_Apex_Trigger_Best_Practices>\n        ",
      "categories": [
        "Best Practices"
      ],
      "message": "Avoid logic in triggers"
    },
    {
      "rulesets": [
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "DebugsShouldUseLoggingLevel",
      "description": "\nThe first parameter of System.debug, when using the signature with two parameters, is a LoggingLevel enum.\n\nHaving the Logging Level specified provides a cleaner log, and improves readability of it.\n       ",
      "categories": [
        "Best Practices"
      ],
      "message": "Calls to System.debug should specify a logging level."
    },
    {
      "rulesets": [
        "Performance",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidDmlStatementsInLoops",
      "description": "\nAvoid DML statements inside loops to avoid hitting the DML governor limit. Instead, try to batch up the data into a list and invoke your DML once on that list of data outside the loop.\n        ",
      "categories": [
        "Performance"
      ],
      "message": "Avoid DML statements inside loops"
    },
    {
      "rulesets": [
        "Performance",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidSoqlInLoops",
      "description": "\nNew objects created within loops should be checked to see if they can created outside them and reused.\n        ",
      "categories": [
        "Performance"
      ],
      "message": "Avoid Soql queries inside loops"
    },
    {
      "rulesets": [
        "Performance",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidSoslInLoops",
      "description": "\nSosl calls within loops can cause governor limit exceptions.\n        ",
      "categories": [
        "Performance"
      ],
      "message": "Avoid Sosl queries inside loops"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexBadCrypto",
      "description": "\nThe rule makes sure you are using randomly generated IVs and keys for `Crypto` calls.\nHard-wiring these values greatly compromises the security of encrypted data.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Apex classes should use random IV\/key"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexCRUDViolation",
      "description": "\nThe rule validates you are checking for access permissions before a SOQL\/SOSL\/DML operation.\nSince Apex runs in system mode not having proper permissions checks results in escalation of \nprivilege and may produce runtime errors. This check forces you to handle such scenarios.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Validate CRUD permission before SOQL\/DML operation"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexCSRF",
      "description": "\nCheck to avoid making DML operations in Apex class constructor\/init method. This prevents\nmodification of the database just by accessing a page.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Avoid making DML operations in Apex class constructor\/init method"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexDangerousMethods",
      "description": "\nChecks against calling dangerous methods.\n\nFor the time being, it reports:\n\n* Against `FinancialForce`'s `Configuration.disableTriggerCRUDSecurity()`. Disabling CRUD security\nopens the door to several attacks and requires manual validation, which is unreliable.\n* Calling `System.debug` passing sensitive data as parameter, which could lead to exposure\nof private data.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Calling potentially dangerous method"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexInsecureEndpoint",
      "description": "\nChecks against accessing endpoints under plain **http**. You should always use\n**https** for security.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Apex callouts should use encrypted communication channels"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexOpenRedirect",
      "description": "\nChecks against redirects to user-controlled locations. This prevents attackers from\nredirecting users to phishing sites.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Apex classes should safely redirect to a known location"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexSharingViolations",
      "description": "\nDetect classes declared without explicit sharing mode if DML methods are used. This\nforces the developer to take access restrictions into account before modifying objects.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Apex classes should declare a sharing model if DML or SOQL\/SOSL is used"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexSOQLInjection",
      "description": "\nDetects the usage of untrusted \/ unescaped variables in DML queries.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Avoid untrusted\/unescaped variables in DML query"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexSuggestUsingNamedCred",
      "description": "\nDetects hardcoded credentials used in requests to an endpoint.\n\nYou should refrain from hardcoding credentials:\n  * They are hard to mantain by being mixed in application code\n  * Particularly hard to update them when used from different classes\n  * Granting a developer access to the codebase means granting knowledge\n     of credentials, keeping a two-level access is not possible.\n  * Using different credentials for different environments is troublesome\n     and error-prone.\n\nInstead, you should use *Named Credentials* and a callout endpoint.\n\nFor more information, you can check [this](https:\/\/developer.salesforce.com\/docs\/atlas.en-us.apexcode.meta\/apexcode\/apex_callouts_named_credentials.htm)\n        ",
      "categories": [
        "Security"
      ],
      "message": "Suggest named credentials for authentication"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexXSSFromEscapeFalse",
      "description": "\nReports on calls to `addError` with disabled escaping. The message passed to `addError`\nwill be displayed directly to the user in the UI, making it prime ground for XSS\nattacks if unescaped.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Apex classes should escape Strings in error messages"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart",
        "Security"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexXSSFromURLParam",
      "description": "\nMakes sure that all values obtained from URL parameters are properly escaped \/ sanitized\nto avoid XSS attacks.\n        ",
      "categories": [
        "Security"
      ],
      "message": "Apex classes should escape\/sanitize Strings obtained from URL parameters"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ClassNamingConventions",
      "description": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Apex naming convention (Pascal case).\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "The {0} name ''{1}'' doesn''t match ''{2}''"
    },
    {
      "rulesets": [
        "Braces",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "IfElseStmtsMustUseBraces",
      "description": "\nAvoid using if..else statements without using surrounding braces. If the code formatting\nor indentation is lost then it becomes difficult to separate the code being controlled\nfrom the rest.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using 'if...else' statements without curly braces"
    },
    {
      "rulesets": [
        "Braces",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "IfStmtsMustUseBraces",
      "description": "\nAvoid using if statements without using braces to surround the code block. If the code\nformatting or indentation is lost then it becomes difficult to separate the code being\ncontrolled from the rest.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using if statements without curly braces"
    },
    {
      "rulesets": [
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "FieldNamingConventions",
      "description": "\n            Configurable naming conventions for field declarations. This rule reports variable declarations\n            which do not match the regex that applies to their specific kind ---e.g. constants (static final),\n            static field, final field. Each regex can be configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "The {0} name ''{1}'' doesn''t match ''{2}''"
    },
    {
      "rulesets": [
        "Braces",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ForLoopsMustUseBraces",
      "description": "\nAvoid using 'for' statements without using surrounding braces. If the code formatting or\nindentation is lost then it becomes difficult to separate the code being controlled\nfrom the rest.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using 'for' statements without curly braces"
    },
    {
      "rulesets": [
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "FormalParameterNamingConventions",
      "description": "\n            Configurable naming conventions for formal parameters of methods.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. method parameter, or final method parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "The {0} name ''{1}'' doesn''t match ''{2}''"
    },
    {
      "rulesets": [
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "LocalVariableNamingConventions",
      "description": "\n            Configurable naming conventions for local variable declarations.\n            This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. local variable, or final local variable). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "The {0} name ''{1}'' doesn''t match ''{2}''"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "MethodNamingConventions",
      "description": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. static method, or test method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "The {0} name ''{1}'' doesn''t match ''{2}''"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "OneDeclarationPerLine",
      "description": "\nApex allows the use of several variables declaration of the same type on one line. However, it\ncan lead to quite messy code. This rule looks for several declarations on the same line.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Use one statement for each line, it enhances code readability."
    },
    {
      "rulesets": [
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "PropertyNamingConventions",
      "description": "\n            Configurable naming conventions for property declarations. This rule reports\n            property declarations which do not match the regex that applies to their\n            specific kind (e.g. static property, or instance property). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "The {0} name ''{1}'' doesn''t match ''{2}''"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex"
      ],
      "languages": [
        "apex"
      ],
      "name": "VariableNamingConventions",
      "description": "\nA variable naming conventions rule - customize this to your liking.  Currently, it\nchecks for final variables that should be fully capitalized and non-final variables\nthat should not include underscores.\n\nThis rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced\nby the more general rules {% rule \"apex\/codestyle\/FieldNamingConventions\" %},\n{% rule \"apex\/codestyle\/FormalParameterNamingConventions\" %},\n{% rule \"apex\/codestyle\/LocalVariableNamingConventions\" %}, and\n{% rule \"apex\/codestyle\/PropertyNamingConventions\" %}.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "{0} variable {1} should begin with {2}"
    },
    {
      "rulesets": [
        "Braces",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "WhileLoopsMustUseBraces",
      "description": "\nAvoid using 'while' statements without using braces to surround the code block. If the code\nformatting or indentation is lost then it becomes difficult to separate the code being\ncontrolled from the rest.\n        ",
      "categories": [
        "Code Style"
      ],
      "message": "Avoid using 'while' statements without curly braces"
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidDeeplyNestedIfStmts",
      "description": "\nAvoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.\n        ",
      "categories": [
        "Design"
      ],
      "message": "Deeply nested if..then statements are hard to read"
    },
    {
      "rulesets": [
        "Metrics temporary ruleset",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "CyclomaticComplexity",
      "description": "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as 'if', 'while', 'for', and 'case'.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionnally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 40, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        ",
      "categories": [
        "Design"
      ],
      "message": "The {0} ''{1}'' has a{2} cyclomatic complexity of {3}."
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ExcessiveClassLength",
      "description": "\nExcessive class file lengths are usually indications that the class may be burdened with excessive \nresponsibilities that could be provided by external classes or functions. In breaking these methods\napart the code becomes more managable and ripe for reuse.\n        ",
      "categories": [
        "Design"
      ],
      "message": "Avoid really long classes."
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ExcessiveParameterList",
      "description": "\nMethods with numerous parameters are a challenge to maintain, especially if most of them share the\nsame datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\n        ",
      "categories": [
        "Design"
      ],
      "message": "Avoid long parameter lists."
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ExcessivePublicCount",
      "description": "\nClasses with large numbers of public methods and attributes require disproportionate testing efforts\nsince combinational side effects grow rapidly and increase risk. Refactoring these classes into\nsmaller ones not only increases testability and reliability but also allows new variations to be\ndeveloped easily.\n        ",
      "categories": [
        "Design"
      ],
      "message": "This class has a bunch of public methods and attributes"
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "NcssConstructorCount",
      "description": "\nThis rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines\nof code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,\nlines of code that are split are counted as one.\n        ",
      "categories": [
        "Design"
      ],
      "message": "The constructor has an NCSS line count of {0}"
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "NcssMethodCount",
      "description": "\nThis rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines\nof code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,\nlines of code that are split are counted as one.\n        ",
      "categories": [
        "Design"
      ],
      "message": "The method ''{0}()'' has an NCSS line count of {1}"
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "NcssTypeCount",
      "description": "\nThis rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines\nof code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,\nlines of code that are split are counted as one.\n        ",
      "categories": [
        "Design"
      ],
      "message": "The type has an NCSS line count of {0}"
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "StdCyclomaticComplexity",
      "description": "\nComplexity directly affects maintenance costs is determined by the number of decision points in a method \nplus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  \nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity.\n        ",
      "categories": [
        "Design"
      ],
      "message": "The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}."
    },
    {
      "rulesets": [
        "Complexity",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "TooManyFields",
      "description": "\nClasses that have too many fields can become unwieldy and could be redesigned to have fewer fields,\npossibly through grouping related fields in new objects.  For example, a class with individual \ncity\/state\/zip fields could park them within a single Address field.\n        ",
      "categories": [
        "Design"
      ],
      "message": "Too many fields"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidDirectAccessTriggerMap",
      "description": "\nAvoid directly accessing Trigger.old and Trigger.new as it can lead to a bug. Triggers should be bulkified and iterate through the map to handle the actions for each item separately.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Avoid directly accessing Trigger.old and Trigger.new"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidHardcodingId",
      "description": "\nWhen deploying Apex code between sandbox and production environments, or installing Force.com AppExchange packages,\nit is essential to avoid hardcoding IDs in the Apex code. By doing so, if the record IDs change between environments,\nthe logic can dynamically identify the proper data to operate against and not fail.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Hardcoding Id's is bound to break when changing environments."
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "Empty Code",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "EmptyCatchBlock",
      "description": "\nEmpty Catch Block finds instances where an exception is caught, but nothing is done.  \nIn most circumstances, this swallows an exception which should either be acted on \nor reported.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Avoid empty catch blocks"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "Empty Code",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "EmptyIfStmt",
      "description": "\nEmpty If Statement finds instances where a condition is checked but nothing is done about it.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Avoid empty 'if' statements"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "Empty Code",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "EmptyStatementBlock",
      "description": "\nEmpty block statements serve no purpose and should be removed.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Avoid empty block statements."
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "Empty Code",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "EmptyTryOrFinallyBlock",
      "description": "\nAvoid empty try or finally blocks - what's the point?\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Avoid empty try or finally blocks"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "Empty Code",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "EmptyWhileStmt",
      "description": "\nEmpty While Statement finds all instances where a while statement does nothing.  \nIf it is a timing loop, then you should use Thread.sleep() for it; if it is\na while loop that does a lot in the exit expression, rewrite it to make it clearer.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Avoid empty 'while' statements"
    },
    {
      "rulesets": [
        "Style",
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "MethodWithSameNameAsEnclosingClass",
      "description": "\nNon-constructor methods should not have the same name as the enclosing class.\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Classes should not have non-constructor methods with the same name as the class"
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "AvoidNonExistentAnnotations",
      "description": "\n            Apex supported non existent annotations for legacy reasons.\n            In the future, use of such non-existent annotations could result in broken apex code that will not compile.\n            This will prevent users of garbage annotations from being able to use legitimate annotations added to Apex in the future.\n            A full list of supported annotations can be found at https:\/\/developer.salesforce.com\/docs\/atlas.en-us.apexcode.meta\/apexcode\/apex_classes_annotation.htm\n        ",
      "categories": [
        "Error Prone"
      ],
      "message": "Use of non existent annotations will lead to broken Apex code which will not compile in the future."
    },
    {
      "rulesets": [
        "Default ruleset used by the CodeClimate Engine for Salesforce.com Apex",
        "quickstart"
      ],
      "languages": [
        "apex"
      ],
      "name": "ApexDoc",
      "description": "\nThis rule validates that:\n\n* ApexDoc comments are present for classes, methods, and properties that are public or global, excluding\noverrides and test classes (as well as the contents of test classes).\n* ApexDoc comments should contain @description.\n* ApexDoc comments on non-void, non-constructor methods should contain @return.\n* ApexDoc comments on void or constructor methods should not contain @return.\n* ApexDoc comments on methods with parameters should contain @param for each parameter, in the same\norder as the method signature.\n\nMethod overrides and tests are both exempted from having ApexDoc.\n        ",
      "categories": [
        "Documentation"
      ],
      "message": "ApexDoc comment is missing or incorrect"
    }
  ],
  "categories": {
    "Design": [
      "category\/ecmascript\/design.xml",
      "category\/apex\/design.xml"
    ],
    "Multithreading": [
      "category\/ecmascript\/multithreading.xml",
      "category\/apex\/multithreading.xml"
    ],
    "Documentation": [
      "category\/ecmascript\/documentation.xml",
      "category\/apex\/documentation.xml"
    ],
    "Best Practices": [
      "category\/ecmascript\/bestpractices.xml",
      "category\/apex\/bestpractices.xml"
    ],
    "Performance": [
      "category\/ecmascript\/performance.xml",
      "category\/apex\/performance.xml"
    ],
    "Security": [
      "category\/ecmascript\/security.xml",
      "category\/apex\/security.xml"
    ],
    "Code Style": [
      "category\/ecmascript\/codestyle.xml",
      "category\/apex\/codestyle.xml"
    ],
    "Error Prone": [
      "category\/ecmascript\/errorprone.xml",
      "category\/apex\/errorprone.xml"
    ]
  }
}
